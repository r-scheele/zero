// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/notelike"
	"github.com/r-scheele/zero/ent/user"
)

// NoteLikeCreate is the builder for creating a NoteLike entity.
type NoteLikeCreate struct {
	config
	mutation *NoteLikeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (nlc *NoteLikeCreate) SetCreatedAt(t time.Time) *NoteLikeCreate {
	nlc.mutation.SetCreatedAt(t)
	return nlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nlc *NoteLikeCreate) SetNillableCreatedAt(t *time.Time) *NoteLikeCreate {
	if t != nil {
		nlc.SetCreatedAt(*t)
	}
	return nlc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nlc *NoteLikeCreate) SetUserID(id int) *NoteLikeCreate {
	nlc.mutation.SetUserID(id)
	return nlc
}

// SetUser sets the "user" edge to the User entity.
func (nlc *NoteLikeCreate) SetUser(u *User) *NoteLikeCreate {
	return nlc.SetUserID(u.ID)
}

// SetNoteID sets the "note" edge to the Note entity by ID.
func (nlc *NoteLikeCreate) SetNoteID(id int) *NoteLikeCreate {
	nlc.mutation.SetNoteID(id)
	return nlc
}

// SetNote sets the "note" edge to the Note entity.
func (nlc *NoteLikeCreate) SetNote(n *Note) *NoteLikeCreate {
	return nlc.SetNoteID(n.ID)
}

// Mutation returns the NoteLikeMutation object of the builder.
func (nlc *NoteLikeCreate) Mutation() *NoteLikeMutation {
	return nlc.mutation
}

// Save creates the NoteLike in the database.
func (nlc *NoteLikeCreate) Save(ctx context.Context) (*NoteLike, error) {
	nlc.defaults()
	return withHooks(ctx, nlc.sqlSave, nlc.mutation, nlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nlc *NoteLikeCreate) SaveX(ctx context.Context) *NoteLike {
	v, err := nlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nlc *NoteLikeCreate) Exec(ctx context.Context) error {
	_, err := nlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nlc *NoteLikeCreate) ExecX(ctx context.Context) {
	if err := nlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nlc *NoteLikeCreate) defaults() {
	if _, ok := nlc.mutation.CreatedAt(); !ok {
		v := notelike.DefaultCreatedAt()
		nlc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nlc *NoteLikeCreate) check() error {
	if _, ok := nlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NoteLike.created_at"`)}
	}
	if len(nlc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "NoteLike.user"`)}
	}
	if len(nlc.mutation.NoteIDs()) == 0 {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required edge "NoteLike.note"`)}
	}
	return nil
}

func (nlc *NoteLikeCreate) sqlSave(ctx context.Context) (*NoteLike, error) {
	if err := nlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nlc.mutation.id = &_node.ID
	nlc.mutation.done = true
	return _node, nil
}

func (nlc *NoteLikeCreate) createSpec() (*NoteLike, *sqlgraph.CreateSpec) {
	var (
		_node = &NoteLike{config: nlc.config}
		_spec = sqlgraph.NewCreateSpec(notelike.Table, sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt))
	)
	if value, ok := nlc.mutation.CreatedAt(); ok {
		_spec.SetField(notelike.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := nlc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.UserTable,
			Columns: []string{notelike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_note_likes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nlc.mutation.NoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.NoteTable,
			Columns: []string{notelike.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.note_likes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NoteLikeCreateBulk is the builder for creating many NoteLike entities in bulk.
type NoteLikeCreateBulk struct {
	config
	err      error
	builders []*NoteLikeCreate
}

// Save creates the NoteLike entities in the database.
func (nlcb *NoteLikeCreateBulk) Save(ctx context.Context) ([]*NoteLike, error) {
	if nlcb.err != nil {
		return nil, nlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nlcb.builders))
	nodes := make([]*NoteLike, len(nlcb.builders))
	mutators := make([]Mutator, len(nlcb.builders))
	for i := range nlcb.builders {
		func(i int, root context.Context) {
			builder := nlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NoteLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nlcb *NoteLikeCreateBulk) SaveX(ctx context.Context) []*NoteLike {
	v, err := nlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nlcb *NoteLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := nlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nlcb *NoteLikeCreateBulk) ExecX(ctx context.Context) {
	if err := nlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
