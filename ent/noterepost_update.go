// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/noterepost"
	"github.com/r-scheele/zero/ent/predicate"
	"github.com/r-scheele/zero/ent/user"
)

// NoteRepostUpdate is the builder for updating NoteRepost entities.
type NoteRepostUpdate struct {
	config
	hooks    []Hook
	mutation *NoteRepostMutation
}

// Where appends a list predicates to the NoteRepostUpdate builder.
func (nru *NoteRepostUpdate) Where(ps ...predicate.NoteRepost) *NoteRepostUpdate {
	nru.mutation.Where(ps...)
	return nru
}

// SetComment sets the "comment" field.
func (nru *NoteRepostUpdate) SetComment(s string) *NoteRepostUpdate {
	nru.mutation.SetComment(s)
	return nru
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nru *NoteRepostUpdate) SetNillableComment(s *string) *NoteRepostUpdate {
	if s != nil {
		nru.SetComment(*s)
	}
	return nru
}

// ClearComment clears the value of the "comment" field.
func (nru *NoteRepostUpdate) ClearComment() *NoteRepostUpdate {
	nru.mutation.ClearComment()
	return nru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nru *NoteRepostUpdate) SetUserID(id int) *NoteRepostUpdate {
	nru.mutation.SetUserID(id)
	return nru
}

// SetUser sets the "user" edge to the User entity.
func (nru *NoteRepostUpdate) SetUser(u *User) *NoteRepostUpdate {
	return nru.SetUserID(u.ID)
}

// SetNoteID sets the "note" edge to the Note entity by ID.
func (nru *NoteRepostUpdate) SetNoteID(id int) *NoteRepostUpdate {
	nru.mutation.SetNoteID(id)
	return nru
}

// SetNote sets the "note" edge to the Note entity.
func (nru *NoteRepostUpdate) SetNote(n *Note) *NoteRepostUpdate {
	return nru.SetNoteID(n.ID)
}

// Mutation returns the NoteRepostMutation object of the builder.
func (nru *NoteRepostUpdate) Mutation() *NoteRepostMutation {
	return nru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (nru *NoteRepostUpdate) ClearUser() *NoteRepostUpdate {
	nru.mutation.ClearUser()
	return nru
}

// ClearNote clears the "note" edge to the Note entity.
func (nru *NoteRepostUpdate) ClearNote() *NoteRepostUpdate {
	nru.mutation.ClearNote()
	return nru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nru *NoteRepostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nru.sqlSave, nru.mutation, nru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nru *NoteRepostUpdate) SaveX(ctx context.Context) int {
	affected, err := nru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nru *NoteRepostUpdate) Exec(ctx context.Context) error {
	_, err := nru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nru *NoteRepostUpdate) ExecX(ctx context.Context) {
	if err := nru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nru *NoteRepostUpdate) check() error {
	if nru.mutation.UserCleared() && len(nru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NoteRepost.user"`)
	}
	if nru.mutation.NoteCleared() && len(nru.mutation.NoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NoteRepost.note"`)
	}
	return nil
}

func (nru *NoteRepostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(noterepost.Table, noterepost.Columns, sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt))
	if ps := nru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nru.mutation.Comment(); ok {
		_spec.SetField(noterepost.FieldComment, field.TypeString, value)
	}
	if nru.mutation.CommentCleared() {
		_spec.ClearField(noterepost.FieldComment, field.TypeString)
	}
	if nru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.UserTable,
			Columns: []string{noterepost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.UserTable,
			Columns: []string{noterepost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nru.mutation.NoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.NoteTable,
			Columns: []string{noterepost.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nru.mutation.NoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.NoteTable,
			Columns: []string{noterepost.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{noterepost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nru.mutation.done = true
	return n, nil
}

// NoteRepostUpdateOne is the builder for updating a single NoteRepost entity.
type NoteRepostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NoteRepostMutation
}

// SetComment sets the "comment" field.
func (nruo *NoteRepostUpdateOne) SetComment(s string) *NoteRepostUpdateOne {
	nruo.mutation.SetComment(s)
	return nruo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nruo *NoteRepostUpdateOne) SetNillableComment(s *string) *NoteRepostUpdateOne {
	if s != nil {
		nruo.SetComment(*s)
	}
	return nruo
}

// ClearComment clears the value of the "comment" field.
func (nruo *NoteRepostUpdateOne) ClearComment() *NoteRepostUpdateOne {
	nruo.mutation.ClearComment()
	return nruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nruo *NoteRepostUpdateOne) SetUserID(id int) *NoteRepostUpdateOne {
	nruo.mutation.SetUserID(id)
	return nruo
}

// SetUser sets the "user" edge to the User entity.
func (nruo *NoteRepostUpdateOne) SetUser(u *User) *NoteRepostUpdateOne {
	return nruo.SetUserID(u.ID)
}

// SetNoteID sets the "note" edge to the Note entity by ID.
func (nruo *NoteRepostUpdateOne) SetNoteID(id int) *NoteRepostUpdateOne {
	nruo.mutation.SetNoteID(id)
	return nruo
}

// SetNote sets the "note" edge to the Note entity.
func (nruo *NoteRepostUpdateOne) SetNote(n *Note) *NoteRepostUpdateOne {
	return nruo.SetNoteID(n.ID)
}

// Mutation returns the NoteRepostMutation object of the builder.
func (nruo *NoteRepostUpdateOne) Mutation() *NoteRepostMutation {
	return nruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (nruo *NoteRepostUpdateOne) ClearUser() *NoteRepostUpdateOne {
	nruo.mutation.ClearUser()
	return nruo
}

// ClearNote clears the "note" edge to the Note entity.
func (nruo *NoteRepostUpdateOne) ClearNote() *NoteRepostUpdateOne {
	nruo.mutation.ClearNote()
	return nruo
}

// Where appends a list predicates to the NoteRepostUpdate builder.
func (nruo *NoteRepostUpdateOne) Where(ps ...predicate.NoteRepost) *NoteRepostUpdateOne {
	nruo.mutation.Where(ps...)
	return nruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nruo *NoteRepostUpdateOne) Select(field string, fields ...string) *NoteRepostUpdateOne {
	nruo.fields = append([]string{field}, fields...)
	return nruo
}

// Save executes the query and returns the updated NoteRepost entity.
func (nruo *NoteRepostUpdateOne) Save(ctx context.Context) (*NoteRepost, error) {
	return withHooks(ctx, nruo.sqlSave, nruo.mutation, nruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nruo *NoteRepostUpdateOne) SaveX(ctx context.Context) *NoteRepost {
	node, err := nruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nruo *NoteRepostUpdateOne) Exec(ctx context.Context) error {
	_, err := nruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nruo *NoteRepostUpdateOne) ExecX(ctx context.Context) {
	if err := nruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nruo *NoteRepostUpdateOne) check() error {
	if nruo.mutation.UserCleared() && len(nruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NoteRepost.user"`)
	}
	if nruo.mutation.NoteCleared() && len(nruo.mutation.NoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NoteRepost.note"`)
	}
	return nil
}

func (nruo *NoteRepostUpdateOne) sqlSave(ctx context.Context) (_node *NoteRepost, err error) {
	if err := nruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(noterepost.Table, noterepost.Columns, sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt))
	id, ok := nruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NoteRepost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, noterepost.FieldID)
		for _, f := range fields {
			if !noterepost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != noterepost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nruo.mutation.Comment(); ok {
		_spec.SetField(noterepost.FieldComment, field.TypeString, value)
	}
	if nruo.mutation.CommentCleared() {
		_spec.ClearField(noterepost.FieldComment, field.TypeString)
	}
	if nruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.UserTable,
			Columns: []string{noterepost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.UserTable,
			Columns: []string{noterepost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nruo.mutation.NoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.NoteTable,
			Columns: []string{noterepost.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nruo.mutation.NoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.NoteTable,
			Columns: []string{noterepost.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NoteRepost{config: nruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{noterepost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nruo.mutation.done = true
	return _node, nil
}
