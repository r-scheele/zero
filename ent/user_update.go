// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/notelike"
	"github.com/r-scheele/zero/ent/noterepost"
	"github.com/r-scheele/zero/ent/passwordtoken"
	"github.com/r-scheele/zero/ent/predicate"
	"github.com/r-scheele/zero/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetVerified sets the "verified" field.
func (uu *UserUpdate) SetVerified(b bool) *UserUpdate {
	uu.mutation.SetVerified(b)
	return uu
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetVerified(*b)
	}
	return uu
}

// SetVerificationCode sets the "verification_code" field.
func (uu *UserUpdate) SetVerificationCode(s string) *UserUpdate {
	uu.mutation.SetVerificationCode(s)
	return uu
}

// SetNillableVerificationCode sets the "verification_code" field if the given value is not nil.
func (uu *UserUpdate) SetNillableVerificationCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetVerificationCode(*s)
	}
	return uu
}

// ClearVerificationCode clears the value of the "verification_code" field.
func (uu *UserUpdate) ClearVerificationCode() *UserUpdate {
	uu.mutation.ClearVerificationCode()
	return uu
}

// SetAdmin sets the "admin" field.
func (uu *UserUpdate) SetAdmin(b bool) *UserUpdate {
	uu.mutation.SetAdmin(b)
	return uu
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetAdmin(*b)
	}
	return uu
}

// SetRegistrationMethod sets the "registration_method" field.
func (uu *UserUpdate) SetRegistrationMethod(um user.RegistrationMethod) *UserUpdate {
	uu.mutation.SetRegistrationMethod(um)
	return uu
}

// SetNillableRegistrationMethod sets the "registration_method" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRegistrationMethod(um *user.RegistrationMethod) *UserUpdate {
	if um != nil {
		uu.SetRegistrationMethod(*um)
	}
	return uu
}

// SetProfilePicture sets the "profile_picture" field.
func (uu *UserUpdate) SetProfilePicture(s string) *UserUpdate {
	uu.mutation.SetProfilePicture(s)
	return uu
}

// SetNillableProfilePicture sets the "profile_picture" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProfilePicture(s *string) *UserUpdate {
	if s != nil {
		uu.SetProfilePicture(*s)
	}
	return uu
}

// ClearProfilePicture clears the value of the "profile_picture" field.
func (uu *UserUpdate) ClearProfilePicture() *UserUpdate {
	uu.mutation.ClearProfilePicture()
	return uu
}

// SetDarkMode sets the "dark_mode" field.
func (uu *UserUpdate) SetDarkMode(b bool) *UserUpdate {
	uu.mutation.SetDarkMode(b)
	return uu
}

// SetNillableDarkMode sets the "dark_mode" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDarkMode(b *bool) *UserUpdate {
	if b != nil {
		uu.SetDarkMode(*b)
	}
	return uu
}

// SetBio sets the "bio" field.
func (uu *UserUpdate) SetBio(s string) *UserUpdate {
	uu.mutation.SetBio(s)
	return uu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBio(s *string) *UserUpdate {
	if s != nil {
		uu.SetBio(*s)
	}
	return uu
}

// ClearBio clears the value of the "bio" field.
func (uu *UserUpdate) ClearBio() *UserUpdate {
	uu.mutation.ClearBio()
	return uu
}

// SetEmailNotifications sets the "email_notifications" field.
func (uu *UserUpdate) SetEmailNotifications(b bool) *UserUpdate {
	uu.mutation.SetEmailNotifications(b)
	return uu
}

// SetNillableEmailNotifications sets the "email_notifications" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailNotifications(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailNotifications(*b)
	}
	return uu
}

// SetSmsNotifications sets the "sms_notifications" field.
func (uu *UserUpdate) SetSmsNotifications(b bool) *UserUpdate {
	uu.mutation.SetSmsNotifications(b)
	return uu
}

// SetNillableSmsNotifications sets the "sms_notifications" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSmsNotifications(b *bool) *UserUpdate {
	if b != nil {
		uu.SetSmsNotifications(*b)
	}
	return uu
}

// SetIsActive sets the "is_active" field.
func (uu *UserUpdate) SetIsActive(b bool) *UserUpdate {
	uu.mutation.SetIsActive(b)
	return uu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsActive(*b)
	}
	return uu
}

// SetLastLogin sets the "last_login" field.
func (uu *UserUpdate) SetLastLogin(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogin(t)
	return uu
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLogin(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLogin(*t)
	}
	return uu
}

// ClearLastLogin clears the value of the "last_login" field.
func (uu *UserUpdate) ClearLastLogin() *UserUpdate {
	uu.mutation.ClearLastLogin()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// AddOwnerIDs adds the "owner" edge to the PasswordToken entity by IDs.
func (uu *UserUpdate) AddOwnerIDs(ids ...int) *UserUpdate {
	uu.mutation.AddOwnerIDs(ids...)
	return uu
}

// AddOwner adds the "owner" edges to the PasswordToken entity.
func (uu *UserUpdate) AddOwner(p ...*PasswordToken) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddOwnerIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (uu *UserUpdate) AddNoteIDs(ids ...int) *UserUpdate {
	uu.mutation.AddNoteIDs(ids...)
	return uu
}

// AddNotes adds the "notes" edges to the Note entity.
func (uu *UserUpdate) AddNotes(n ...*Note) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNoteIDs(ids...)
}

// AddNoteLikeIDs adds the "note_likes" edge to the NoteLike entity by IDs.
func (uu *UserUpdate) AddNoteLikeIDs(ids ...int) *UserUpdate {
	uu.mutation.AddNoteLikeIDs(ids...)
	return uu
}

// AddNoteLikes adds the "note_likes" edges to the NoteLike entity.
func (uu *UserUpdate) AddNoteLikes(n ...*NoteLike) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNoteLikeIDs(ids...)
}

// AddNoteRepostIDs adds the "note_reposts" edge to the NoteRepost entity by IDs.
func (uu *UserUpdate) AddNoteRepostIDs(ids ...int) *UserUpdate {
	uu.mutation.AddNoteRepostIDs(ids...)
	return uu
}

// AddNoteReposts adds the "note_reposts" edges to the NoteRepost entity.
func (uu *UserUpdate) AddNoteReposts(n ...*NoteRepost) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNoteRepostIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearOwner clears all "owner" edges to the PasswordToken entity.
func (uu *UserUpdate) ClearOwner() *UserUpdate {
	uu.mutation.ClearOwner()
	return uu
}

// RemoveOwnerIDs removes the "owner" edge to PasswordToken entities by IDs.
func (uu *UserUpdate) RemoveOwnerIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveOwnerIDs(ids...)
	return uu
}

// RemoveOwner removes "owner" edges to PasswordToken entities.
func (uu *UserUpdate) RemoveOwner(p ...*PasswordToken) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveOwnerIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (uu *UserUpdate) ClearNotes() *UserUpdate {
	uu.mutation.ClearNotes()
	return uu
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (uu *UserUpdate) RemoveNoteIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveNoteIDs(ids...)
	return uu
}

// RemoveNotes removes "notes" edges to Note entities.
func (uu *UserUpdate) RemoveNotes(n ...*Note) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNoteIDs(ids...)
}

// ClearNoteLikes clears all "note_likes" edges to the NoteLike entity.
func (uu *UserUpdate) ClearNoteLikes() *UserUpdate {
	uu.mutation.ClearNoteLikes()
	return uu
}

// RemoveNoteLikeIDs removes the "note_likes" edge to NoteLike entities by IDs.
func (uu *UserUpdate) RemoveNoteLikeIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveNoteLikeIDs(ids...)
	return uu
}

// RemoveNoteLikes removes "note_likes" edges to NoteLike entities.
func (uu *UserUpdate) RemoveNoteLikes(n ...*NoteLike) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNoteLikeIDs(ids...)
}

// ClearNoteReposts clears all "note_reposts" edges to the NoteRepost entity.
func (uu *UserUpdate) ClearNoteReposts() *UserUpdate {
	uu.mutation.ClearNoteReposts()
	return uu
}

// RemoveNoteRepostIDs removes the "note_reposts" edge to NoteRepost entities by IDs.
func (uu *UserUpdate) RemoveNoteRepostIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveNoteRepostIDs(ids...)
	return uu
}

// RemoveNoteReposts removes "note_reposts" edges to NoteRepost entities.
func (uu *UserUpdate) RemoveNoteReposts(n ...*NoteRepost) *UserUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNoteRepostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok && !uu.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "User.phone_number": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.RegistrationMethod(); ok {
		if err := user.RegistrationMethodValidator(v); err != nil {
			return &ValidationError{Name: "registration_method", err: fmt.Errorf(`ent: validator failed for field "User.registration_method": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Bio(); ok {
		if err := user.BioValidator(v); err != nil {
			return &ValidationError{Name: "bio", err: fmt.Errorf(`ent: validator failed for field "User.bio": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uu.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uu.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.VerificationCode(); ok {
		_spec.SetField(user.FieldVerificationCode, field.TypeString, value)
	}
	if uu.mutation.VerificationCodeCleared() {
		_spec.ClearField(user.FieldVerificationCode, field.TypeString)
	}
	if value, ok := uu.mutation.Admin(); ok {
		_spec.SetField(user.FieldAdmin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.RegistrationMethod(); ok {
		_spec.SetField(user.FieldRegistrationMethod, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.ProfilePicture(); ok {
		_spec.SetField(user.FieldProfilePicture, field.TypeString, value)
	}
	if uu.mutation.ProfilePictureCleared() {
		_spec.ClearField(user.FieldProfilePicture, field.TypeString)
	}
	if value, ok := uu.mutation.DarkMode(); ok {
		_spec.SetField(user.FieldDarkMode, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if uu.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := uu.mutation.EmailNotifications(); ok {
		_spec.SetField(user.FieldEmailNotifications, field.TypeBool, value)
	}
	if value, ok := uu.mutation.SmsNotifications(); ok {
		_spec.SetField(user.FieldSmsNotifications, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uu.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if uu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OwnerTable,
			Columns: []string{user.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordtoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !uu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OwnerTable,
			Columns: []string{user.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OwnerTable,
			Columns: []string{user.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotesIDs(); len(nodes) > 0 && !uu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NoteLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteLikesTable,
			Columns: []string{user.NoteLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNoteLikesIDs(); len(nodes) > 0 && !uu.mutation.NoteLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteLikesTable,
			Columns: []string{user.NoteLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NoteLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteLikesTable,
			Columns: []string{user.NoteLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NoteRepostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteRepostsTable,
			Columns: []string{user.NoteRepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNoteRepostsIDs(); len(nodes) > 0 && !uu.mutation.NoteRepostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteRepostsTable,
			Columns: []string{user.NoteRepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NoteRepostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteRepostsTable,
			Columns: []string{user.NoteRepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetVerified sets the "verified" field.
func (uuo *UserUpdateOne) SetVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetVerified(b)
	return uuo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetVerified(*b)
	}
	return uuo
}

// SetVerificationCode sets the "verification_code" field.
func (uuo *UserUpdateOne) SetVerificationCode(s string) *UserUpdateOne {
	uuo.mutation.SetVerificationCode(s)
	return uuo
}

// SetNillableVerificationCode sets the "verification_code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVerificationCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetVerificationCode(*s)
	}
	return uuo
}

// ClearVerificationCode clears the value of the "verification_code" field.
func (uuo *UserUpdateOne) ClearVerificationCode() *UserUpdateOne {
	uuo.mutation.ClearVerificationCode()
	return uuo
}

// SetAdmin sets the "admin" field.
func (uuo *UserUpdateOne) SetAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetAdmin(b)
	return uuo
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetAdmin(*b)
	}
	return uuo
}

// SetRegistrationMethod sets the "registration_method" field.
func (uuo *UserUpdateOne) SetRegistrationMethod(um user.RegistrationMethod) *UserUpdateOne {
	uuo.mutation.SetRegistrationMethod(um)
	return uuo
}

// SetNillableRegistrationMethod sets the "registration_method" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRegistrationMethod(um *user.RegistrationMethod) *UserUpdateOne {
	if um != nil {
		uuo.SetRegistrationMethod(*um)
	}
	return uuo
}

// SetProfilePicture sets the "profile_picture" field.
func (uuo *UserUpdateOne) SetProfilePicture(s string) *UserUpdateOne {
	uuo.mutation.SetProfilePicture(s)
	return uuo
}

// SetNillableProfilePicture sets the "profile_picture" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProfilePicture(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetProfilePicture(*s)
	}
	return uuo
}

// ClearProfilePicture clears the value of the "profile_picture" field.
func (uuo *UserUpdateOne) ClearProfilePicture() *UserUpdateOne {
	uuo.mutation.ClearProfilePicture()
	return uuo
}

// SetDarkMode sets the "dark_mode" field.
func (uuo *UserUpdateOne) SetDarkMode(b bool) *UserUpdateOne {
	uuo.mutation.SetDarkMode(b)
	return uuo
}

// SetNillableDarkMode sets the "dark_mode" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDarkMode(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetDarkMode(*b)
	}
	return uuo
}

// SetBio sets the "bio" field.
func (uuo *UserUpdateOne) SetBio(s string) *UserUpdateOne {
	uuo.mutation.SetBio(s)
	return uuo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBio(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBio(*s)
	}
	return uuo
}

// ClearBio clears the value of the "bio" field.
func (uuo *UserUpdateOne) ClearBio() *UserUpdateOne {
	uuo.mutation.ClearBio()
	return uuo
}

// SetEmailNotifications sets the "email_notifications" field.
func (uuo *UserUpdateOne) SetEmailNotifications(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailNotifications(b)
	return uuo
}

// SetNillableEmailNotifications sets the "email_notifications" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailNotifications(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailNotifications(*b)
	}
	return uuo
}

// SetSmsNotifications sets the "sms_notifications" field.
func (uuo *UserUpdateOne) SetSmsNotifications(b bool) *UserUpdateOne {
	uuo.mutation.SetSmsNotifications(b)
	return uuo
}

// SetNillableSmsNotifications sets the "sms_notifications" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSmsNotifications(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetSmsNotifications(*b)
	}
	return uuo
}

// SetIsActive sets the "is_active" field.
func (uuo *UserUpdateOne) SetIsActive(b bool) *UserUpdateOne {
	uuo.mutation.SetIsActive(b)
	return uuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsActive(*b)
	}
	return uuo
}

// SetLastLogin sets the "last_login" field.
func (uuo *UserUpdateOne) SetLastLogin(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogin(t)
	return uuo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLogin(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLogin(*t)
	}
	return uuo
}

// ClearLastLogin clears the value of the "last_login" field.
func (uuo *UserUpdateOne) ClearLastLogin() *UserUpdateOne {
	uuo.mutation.ClearLastLogin()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// AddOwnerIDs adds the "owner" edge to the PasswordToken entity by IDs.
func (uuo *UserUpdateOne) AddOwnerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddOwnerIDs(ids...)
	return uuo
}

// AddOwner adds the "owner" edges to the PasswordToken entity.
func (uuo *UserUpdateOne) AddOwner(p ...*PasswordToken) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddOwnerIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (uuo *UserUpdateOne) AddNoteIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddNoteIDs(ids...)
	return uuo
}

// AddNotes adds the "notes" edges to the Note entity.
func (uuo *UserUpdateOne) AddNotes(n ...*Note) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNoteIDs(ids...)
}

// AddNoteLikeIDs adds the "note_likes" edge to the NoteLike entity by IDs.
func (uuo *UserUpdateOne) AddNoteLikeIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddNoteLikeIDs(ids...)
	return uuo
}

// AddNoteLikes adds the "note_likes" edges to the NoteLike entity.
func (uuo *UserUpdateOne) AddNoteLikes(n ...*NoteLike) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNoteLikeIDs(ids...)
}

// AddNoteRepostIDs adds the "note_reposts" edge to the NoteRepost entity by IDs.
func (uuo *UserUpdateOne) AddNoteRepostIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddNoteRepostIDs(ids...)
	return uuo
}

// AddNoteReposts adds the "note_reposts" edges to the NoteRepost entity.
func (uuo *UserUpdateOne) AddNoteReposts(n ...*NoteRepost) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNoteRepostIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearOwner clears all "owner" edges to the PasswordToken entity.
func (uuo *UserUpdateOne) ClearOwner() *UserUpdateOne {
	uuo.mutation.ClearOwner()
	return uuo
}

// RemoveOwnerIDs removes the "owner" edge to PasswordToken entities by IDs.
func (uuo *UserUpdateOne) RemoveOwnerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveOwnerIDs(ids...)
	return uuo
}

// RemoveOwner removes "owner" edges to PasswordToken entities.
func (uuo *UserUpdateOne) RemoveOwner(p ...*PasswordToken) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveOwnerIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (uuo *UserUpdateOne) ClearNotes() *UserUpdateOne {
	uuo.mutation.ClearNotes()
	return uuo
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (uuo *UserUpdateOne) RemoveNoteIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveNoteIDs(ids...)
	return uuo
}

// RemoveNotes removes "notes" edges to Note entities.
func (uuo *UserUpdateOne) RemoveNotes(n ...*Note) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNoteIDs(ids...)
}

// ClearNoteLikes clears all "note_likes" edges to the NoteLike entity.
func (uuo *UserUpdateOne) ClearNoteLikes() *UserUpdateOne {
	uuo.mutation.ClearNoteLikes()
	return uuo
}

// RemoveNoteLikeIDs removes the "note_likes" edge to NoteLike entities by IDs.
func (uuo *UserUpdateOne) RemoveNoteLikeIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveNoteLikeIDs(ids...)
	return uuo
}

// RemoveNoteLikes removes "note_likes" edges to NoteLike entities.
func (uuo *UserUpdateOne) RemoveNoteLikes(n ...*NoteLike) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNoteLikeIDs(ids...)
}

// ClearNoteReposts clears all "note_reposts" edges to the NoteRepost entity.
func (uuo *UserUpdateOne) ClearNoteReposts() *UserUpdateOne {
	uuo.mutation.ClearNoteReposts()
	return uuo
}

// RemoveNoteRepostIDs removes the "note_reposts" edge to NoteRepost entities by IDs.
func (uuo *UserUpdateOne) RemoveNoteRepostIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveNoteRepostIDs(ids...)
	return uuo
}

// RemoveNoteReposts removes "note_reposts" edges to NoteRepost entities.
func (uuo *UserUpdateOne) RemoveNoteReposts(n ...*NoteRepost) *UserUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNoteRepostIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok && !uuo.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "User.phone_number": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.RegistrationMethod(); ok {
		if err := user.RegistrationMethodValidator(v); err != nil {
			return &ValidationError{Name: "registration_method", err: fmt.Errorf(`ent: validator failed for field "User.registration_method": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Bio(); ok {
		if err := user.BioValidator(v); err != nil {
			return &ValidationError{Name: "bio", err: fmt.Errorf(`ent: validator failed for field "User.bio": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uuo.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.VerificationCode(); ok {
		_spec.SetField(user.FieldVerificationCode, field.TypeString, value)
	}
	if uuo.mutation.VerificationCodeCleared() {
		_spec.ClearField(user.FieldVerificationCode, field.TypeString)
	}
	if value, ok := uuo.mutation.Admin(); ok {
		_spec.SetField(user.FieldAdmin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.RegistrationMethod(); ok {
		_spec.SetField(user.FieldRegistrationMethod, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.ProfilePicture(); ok {
		_spec.SetField(user.FieldProfilePicture, field.TypeString, value)
	}
	if uuo.mutation.ProfilePictureCleared() {
		_spec.ClearField(user.FieldProfilePicture, field.TypeString)
	}
	if value, ok := uuo.mutation.DarkMode(); ok {
		_spec.SetField(user.FieldDarkMode, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if uuo.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := uuo.mutation.EmailNotifications(); ok {
		_spec.SetField(user.FieldEmailNotifications, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.SmsNotifications(); ok {
		_spec.SetField(user.FieldSmsNotifications, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if uuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OwnerTable,
			Columns: []string{user.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordtoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !uuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OwnerTable,
			Columns: []string{user.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OwnerTable,
			Columns: []string{user.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordtoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !uuo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotesTable,
			Columns: []string{user.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NoteLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteLikesTable,
			Columns: []string{user.NoteLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNoteLikesIDs(); len(nodes) > 0 && !uuo.mutation.NoteLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteLikesTable,
			Columns: []string{user.NoteLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NoteLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteLikesTable,
			Columns: []string{user.NoteLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NoteRepostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteRepostsTable,
			Columns: []string{user.NoteRepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNoteRepostsIDs(); len(nodes) > 0 && !uuo.mutation.NoteRepostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteRepostsTable,
			Columns: []string{user.NoteRepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NoteRepostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NoteRepostsTable,
			Columns: []string{user.NoteRepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
