// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldVerified holds the string denoting the verified field in the database.
	FieldVerified = "verified"
	// FieldVerificationCode holds the string denoting the verification_code field in the database.
	FieldVerificationCode = "verification_code"
	// FieldAdmin holds the string denoting the admin field in the database.
	FieldAdmin = "admin"
	// FieldRegistrationMethod holds the string denoting the registration_method field in the database.
	FieldRegistrationMethod = "registration_method"
	// FieldProfilePicture holds the string denoting the profile_picture field in the database.
	FieldProfilePicture = "profile_picture"
	// FieldDarkMode holds the string denoting the dark_mode field in the database.
	FieldDarkMode = "dark_mode"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldEmailNotifications holds the string denoting the email_notifications field in the database.
	FieldEmailNotifications = "email_notifications"
	// FieldSmsNotifications holds the string denoting the sms_notifications field in the database.
	FieldSmsNotifications = "sms_notifications"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the user in the database.
	Table = "users"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "password_tokens"
	// OwnerInverseTable is the table name for the PasswordToken entity.
	// It exists in this package in order to avoid circular dependency with the "passwordtoken" package.
	OwnerInverseTable = "password_tokens"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPhoneNumber,
	FieldEmail,
	FieldPassword,
	FieldVerified,
	FieldVerificationCode,
	FieldAdmin,
	FieldRegistrationMethod,
	FieldProfilePicture,
	FieldDarkMode,
	FieldBio,
	FieldEmailNotifications,
	FieldSmsNotifications,
	FieldIsActive,
	FieldLastLogin,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/r-scheele/zero/ent/runtime"
var (
	Hooks [1]ent.Hook
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	PhoneNumberValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultVerified holds the default value on creation for the "verified" field.
	DefaultVerified bool
	// DefaultAdmin holds the default value on creation for the "admin" field.
	DefaultAdmin bool
	// DefaultDarkMode holds the default value on creation for the "dark_mode" field.
	DefaultDarkMode bool
	// BioValidator is a validator for the "bio" field. It is called by the builders before save.
	BioValidator func(string) error
	// DefaultEmailNotifications holds the default value on creation for the "email_notifications" field.
	DefaultEmailNotifications bool
	// DefaultSmsNotifications holds the default value on creation for the "sms_notifications" field.
	DefaultSmsNotifications bool
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// RegistrationMethod defines the type for the "registration_method" enum field.
type RegistrationMethod string

// RegistrationMethodWeb is the default value of the RegistrationMethod enum.
const DefaultRegistrationMethod = RegistrationMethodWeb

// RegistrationMethod values.
const (
	RegistrationMethodWhatsapp RegistrationMethod = "whatsapp"
	RegistrationMethodWeb      RegistrationMethod = "web"
)

func (rm RegistrationMethod) String() string {
	return string(rm)
}

// RegistrationMethodValidator is a validator for the "registration_method" field enum values. It is called by the builders before save.
func RegistrationMethodValidator(rm RegistrationMethod) error {
	switch rm {
	case RegistrationMethodWhatsapp, RegistrationMethodWeb:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for registration_method field: %q", rm)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByVerified orders the results by the verified field.
func ByVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerified, opts...).ToFunc()
}

// ByVerificationCode orders the results by the verification_code field.
func ByVerificationCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerificationCode, opts...).ToFunc()
}

// ByAdmin orders the results by the admin field.
func ByAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdmin, opts...).ToFunc()
}

// ByRegistrationMethod orders the results by the registration_method field.
func ByRegistrationMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationMethod, opts...).ToFunc()
}

// ByProfilePicture orders the results by the profile_picture field.
func ByProfilePicture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfilePicture, opts...).ToFunc()
}

// ByDarkMode orders the results by the dark_mode field.
func ByDarkMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDarkMode, opts...).ToFunc()
}

// ByBio orders the results by the bio field.
func ByBio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBio, opts...).ToFunc()
}

// ByEmailNotifications orders the results by the email_notifications field.
func ByEmailNotifications(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailNotifications, opts...).ToFunc()
}

// BySmsNotifications orders the results by the sms_notifications field.
func BySmsNotifications(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmsNotifications, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByLastLogin orders the results by the last_login field.
func ByLastLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogin, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerCount orders the results by owner count.
func ByOwnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnerStep(), opts...)
	}
}

// ByOwner orders the results by owner terms.
func ByOwner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OwnerTable, OwnerColumn),
	)
}
