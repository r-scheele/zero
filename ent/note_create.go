// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/notelike"
	"github.com/r-scheele/zero/ent/noterepost"
	"github.com/r-scheele/zero/ent/user"
	"github.com/r-scheele/zero/pkg/types"
)

// NoteCreate is the builder for creating a Note entity.
type NoteCreate struct {
	config
	mutation *NoteMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (nc *NoteCreate) SetTitle(s string) *NoteCreate {
	nc.mutation.SetTitle(s)
	return nc
}

// SetDescription sets the "description" field.
func (nc *NoteCreate) SetDescription(s string) *NoteCreate {
	nc.mutation.SetDescription(s)
	return nc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nc *NoteCreate) SetNillableDescription(s *string) *NoteCreate {
	if s != nil {
		nc.SetDescription(*s)
	}
	return nc
}

// SetContent sets the "content" field.
func (nc *NoteCreate) SetContent(s string) *NoteCreate {
	nc.mutation.SetContent(s)
	return nc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (nc *NoteCreate) SetNillableContent(s *string) *NoteCreate {
	if s != nil {
		nc.SetContent(*s)
	}
	return nc
}

// SetResources sets the "resources" field.
func (nc *NoteCreate) SetResources(t []types.Resource) *NoteCreate {
	nc.mutation.SetResources(t)
	return nc
}

// SetAiCurriculum sets the "ai_curriculum" field.
func (nc *NoteCreate) SetAiCurriculum(s string) *NoteCreate {
	nc.mutation.SetAiCurriculum(s)
	return nc
}

// SetNillableAiCurriculum sets the "ai_curriculum" field if the given value is not nil.
func (nc *NoteCreate) SetNillableAiCurriculum(s *string) *NoteCreate {
	if s != nil {
		nc.SetAiCurriculum(*s)
	}
	return nc
}

// SetVisibility sets the "visibility" field.
func (nc *NoteCreate) SetVisibility(n note.Visibility) *NoteCreate {
	nc.mutation.SetVisibility(n)
	return nc
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (nc *NoteCreate) SetNillableVisibility(n *note.Visibility) *NoteCreate {
	if n != nil {
		nc.SetVisibility(*n)
	}
	return nc
}

// SetPermissionLevel sets the "permission_level" field.
func (nc *NoteCreate) SetPermissionLevel(nl note.PermissionLevel) *NoteCreate {
	nc.mutation.SetPermissionLevel(nl)
	return nc
}

// SetNillablePermissionLevel sets the "permission_level" field if the given value is not nil.
func (nc *NoteCreate) SetNillablePermissionLevel(nl *note.PermissionLevel) *NoteCreate {
	if nl != nil {
		nc.SetPermissionLevel(*nl)
	}
	return nc
}

// SetShareToken sets the "share_token" field.
func (nc *NoteCreate) SetShareToken(s string) *NoteCreate {
	nc.mutation.SetShareToken(s)
	return nc
}

// SetNillableShareToken sets the "share_token" field if the given value is not nil.
func (nc *NoteCreate) SetNillableShareToken(s *string) *NoteCreate {
	if s != nil {
		nc.SetShareToken(*s)
	}
	return nc
}

// SetAiProcessing sets the "ai_processing" field.
func (nc *NoteCreate) SetAiProcessing(b bool) *NoteCreate {
	nc.mutation.SetAiProcessing(b)
	return nc
}

// SetNillableAiProcessing sets the "ai_processing" field if the given value is not nil.
func (nc *NoteCreate) SetNillableAiProcessing(b *bool) *NoteCreate {
	if b != nil {
		nc.SetAiProcessing(*b)
	}
	return nc
}

// SetCreatedAt sets the "created_at" field.
func (nc *NoteCreate) SetCreatedAt(t time.Time) *NoteCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NoteCreate) SetNillableCreatedAt(t *time.Time) *NoteCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NoteCreate) SetUpdatedAt(t time.Time) *NoteCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NoteCreate) SetNillableUpdatedAt(t *time.Time) *NoteCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nc *NoteCreate) SetOwnerID(id int) *NoteCreate {
	nc.mutation.SetOwnerID(id)
	return nc
}

// SetOwner sets the "owner" edge to the User entity.
func (nc *NoteCreate) SetOwner(u *User) *NoteCreate {
	return nc.SetOwnerID(u.ID)
}

// AddLikeIDs adds the "likes" edge to the NoteLike entity by IDs.
func (nc *NoteCreate) AddLikeIDs(ids ...int) *NoteCreate {
	nc.mutation.AddLikeIDs(ids...)
	return nc
}

// AddLikes adds the "likes" edges to the NoteLike entity.
func (nc *NoteCreate) AddLikes(n ...*NoteLike) *NoteCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nc.AddLikeIDs(ids...)
}

// AddRepostIDs adds the "reposts" edge to the NoteRepost entity by IDs.
func (nc *NoteCreate) AddRepostIDs(ids ...int) *NoteCreate {
	nc.mutation.AddRepostIDs(ids...)
	return nc
}

// AddReposts adds the "reposts" edges to the NoteRepost entity.
func (nc *NoteCreate) AddReposts(n ...*NoteRepost) *NoteCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nc.AddRepostIDs(ids...)
}

// Mutation returns the NoteMutation object of the builder.
func (nc *NoteCreate) Mutation() *NoteMutation {
	return nc.mutation
}

// Save creates the Note in the database.
func (nc *NoteCreate) Save(ctx context.Context) (*Note, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NoteCreate) SaveX(ctx context.Context) *Note {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NoteCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NoteCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NoteCreate) defaults() {
	if _, ok := nc.mutation.Visibility(); !ok {
		v := note.DefaultVisibility
		nc.mutation.SetVisibility(v)
	}
	if _, ok := nc.mutation.PermissionLevel(); !ok {
		v := note.DefaultPermissionLevel
		nc.mutation.SetPermissionLevel(v)
	}
	if _, ok := nc.mutation.AiProcessing(); !ok {
		v := note.DefaultAiProcessing
		nc.mutation.SetAiProcessing(v)
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := note.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		v := note.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NoteCreate) check() error {
	if _, ok := nc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Note.title"`)}
	}
	if v, ok := nc.mutation.Title(); ok {
		if err := note.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Note.title": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`ent: missing required field "Note.visibility"`)}
	}
	if v, ok := nc.mutation.Visibility(); ok {
		if err := note.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Note.visibility": %w`, err)}
		}
	}
	if _, ok := nc.mutation.PermissionLevel(); !ok {
		return &ValidationError{Name: "permission_level", err: errors.New(`ent: missing required field "Note.permission_level"`)}
	}
	if v, ok := nc.mutation.PermissionLevel(); ok {
		if err := note.PermissionLevelValidator(v); err != nil {
			return &ValidationError{Name: "permission_level", err: fmt.Errorf(`ent: validator failed for field "Note.permission_level": %w`, err)}
		}
	}
	if _, ok := nc.mutation.AiProcessing(); !ok {
		return &ValidationError{Name: "ai_processing", err: errors.New(`ent: missing required field "Note.ai_processing"`)}
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Note.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Note.updated_at"`)}
	}
	if len(nc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Note.owner"`)}
	}
	return nil
}

func (nc *NoteCreate) sqlSave(ctx context.Context) (*Note, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NoteCreate) createSpec() (*Note, *sqlgraph.CreateSpec) {
	var (
		_node = &Note{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(note.Table, sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt))
	)
	if value, ok := nc.mutation.Title(); ok {
		_spec.SetField(note.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := nc.mutation.Description(); ok {
		_spec.SetField(note.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nc.mutation.Content(); ok {
		_spec.SetField(note.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := nc.mutation.Resources(); ok {
		_spec.SetField(note.FieldResources, field.TypeJSON, value)
		_node.Resources = value
	}
	if value, ok := nc.mutation.AiCurriculum(); ok {
		_spec.SetField(note.FieldAiCurriculum, field.TypeString, value)
		_node.AiCurriculum = value
	}
	if value, ok := nc.mutation.Visibility(); ok {
		_spec.SetField(note.FieldVisibility, field.TypeEnum, value)
		_node.Visibility = value
	}
	if value, ok := nc.mutation.PermissionLevel(); ok {
		_spec.SetField(note.FieldPermissionLevel, field.TypeEnum, value)
		_node.PermissionLevel = value
	}
	if value, ok := nc.mutation.ShareToken(); ok {
		_spec.SetField(note.FieldShareToken, field.TypeString, value)
		_node.ShareToken = value
	}
	if value, ok := nc.mutation.AiProcessing(); ok {
		_spec.SetField(note.FieldAiProcessing, field.TypeBool, value)
		_node.AiProcessing = value
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(note.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(note.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := nc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_notes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.LikesTable,
			Columns: []string{note.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.RepostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.RepostsTable,
			Columns: []string{note.RepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NoteCreateBulk is the builder for creating many Note entities in bulk.
type NoteCreateBulk struct {
	config
	err      error
	builders []*NoteCreate
}

// Save creates the Note entities in the database.
func (ncb *NoteCreateBulk) Save(ctx context.Context) ([]*Note, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Note, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NoteCreateBulk) SaveX(ctx context.Context) []*Note {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NoteCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NoteCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
