// Code generated by ent, DO NOT EDIT.

package note

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/r-scheele/zero/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldDescription, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldContent, v))
}

// AiCurriculum applies equality check predicate on the "ai_curriculum" field. It's identical to AiCurriculumEQ.
func AiCurriculum(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldAiCurriculum, v))
}

// ShareToken applies equality check predicate on the "share_token" field. It's identical to ShareTokenEQ.
func ShareToken(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldShareToken, v))
}

// AiProcessing applies equality check predicate on the "ai_processing" field. It's identical to AiProcessingEQ.
func AiProcessing(v bool) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldAiProcessing, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Note {
	return predicate.Note(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Note {
	return predicate.Note(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Note {
	return predicate.Note(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Note {
	return predicate.Note(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Note {
	return predicate.Note(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Note {
	return predicate.Note(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Note {
	return predicate.Note(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Note {
	return predicate.Note(sql.FieldContainsFold(FieldDescription, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Note {
	return predicate.Note(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.Note {
	return predicate.Note(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.Note {
	return predicate.Note(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Note {
	return predicate.Note(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Note {
	return predicate.Note(sql.FieldContainsFold(FieldContent, v))
}

// ResourcesIsNil applies the IsNil predicate on the "resources" field.
func ResourcesIsNil() predicate.Note {
	return predicate.Note(sql.FieldIsNull(FieldResources))
}

// ResourcesNotNil applies the NotNil predicate on the "resources" field.
func ResourcesNotNil() predicate.Note {
	return predicate.Note(sql.FieldNotNull(FieldResources))
}

// AiCurriculumEQ applies the EQ predicate on the "ai_curriculum" field.
func AiCurriculumEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldAiCurriculum, v))
}

// AiCurriculumNEQ applies the NEQ predicate on the "ai_curriculum" field.
func AiCurriculumNEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldAiCurriculum, v))
}

// AiCurriculumIn applies the In predicate on the "ai_curriculum" field.
func AiCurriculumIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldAiCurriculum, vs...))
}

// AiCurriculumNotIn applies the NotIn predicate on the "ai_curriculum" field.
func AiCurriculumNotIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldAiCurriculum, vs...))
}

// AiCurriculumGT applies the GT predicate on the "ai_curriculum" field.
func AiCurriculumGT(v string) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldAiCurriculum, v))
}

// AiCurriculumGTE applies the GTE predicate on the "ai_curriculum" field.
func AiCurriculumGTE(v string) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldAiCurriculum, v))
}

// AiCurriculumLT applies the LT predicate on the "ai_curriculum" field.
func AiCurriculumLT(v string) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldAiCurriculum, v))
}

// AiCurriculumLTE applies the LTE predicate on the "ai_curriculum" field.
func AiCurriculumLTE(v string) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldAiCurriculum, v))
}

// AiCurriculumContains applies the Contains predicate on the "ai_curriculum" field.
func AiCurriculumContains(v string) predicate.Note {
	return predicate.Note(sql.FieldContains(FieldAiCurriculum, v))
}

// AiCurriculumHasPrefix applies the HasPrefix predicate on the "ai_curriculum" field.
func AiCurriculumHasPrefix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasPrefix(FieldAiCurriculum, v))
}

// AiCurriculumHasSuffix applies the HasSuffix predicate on the "ai_curriculum" field.
func AiCurriculumHasSuffix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasSuffix(FieldAiCurriculum, v))
}

// AiCurriculumIsNil applies the IsNil predicate on the "ai_curriculum" field.
func AiCurriculumIsNil() predicate.Note {
	return predicate.Note(sql.FieldIsNull(FieldAiCurriculum))
}

// AiCurriculumNotNil applies the NotNil predicate on the "ai_curriculum" field.
func AiCurriculumNotNil() predicate.Note {
	return predicate.Note(sql.FieldNotNull(FieldAiCurriculum))
}

// AiCurriculumEqualFold applies the EqualFold predicate on the "ai_curriculum" field.
func AiCurriculumEqualFold(v string) predicate.Note {
	return predicate.Note(sql.FieldEqualFold(FieldAiCurriculum, v))
}

// AiCurriculumContainsFold applies the ContainsFold predicate on the "ai_curriculum" field.
func AiCurriculumContainsFold(v string) predicate.Note {
	return predicate.Note(sql.FieldContainsFold(FieldAiCurriculum, v))
}

// VisibilityEQ applies the EQ predicate on the "visibility" field.
func VisibilityEQ(v Visibility) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldVisibility, v))
}

// VisibilityNEQ applies the NEQ predicate on the "visibility" field.
func VisibilityNEQ(v Visibility) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldVisibility, v))
}

// VisibilityIn applies the In predicate on the "visibility" field.
func VisibilityIn(vs ...Visibility) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldVisibility, vs...))
}

// VisibilityNotIn applies the NotIn predicate on the "visibility" field.
func VisibilityNotIn(vs ...Visibility) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldVisibility, vs...))
}

// PermissionLevelEQ applies the EQ predicate on the "permission_level" field.
func PermissionLevelEQ(v PermissionLevel) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldPermissionLevel, v))
}

// PermissionLevelNEQ applies the NEQ predicate on the "permission_level" field.
func PermissionLevelNEQ(v PermissionLevel) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldPermissionLevel, v))
}

// PermissionLevelIn applies the In predicate on the "permission_level" field.
func PermissionLevelIn(vs ...PermissionLevel) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldPermissionLevel, vs...))
}

// PermissionLevelNotIn applies the NotIn predicate on the "permission_level" field.
func PermissionLevelNotIn(vs ...PermissionLevel) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldPermissionLevel, vs...))
}

// ShareTokenEQ applies the EQ predicate on the "share_token" field.
func ShareTokenEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldShareToken, v))
}

// ShareTokenNEQ applies the NEQ predicate on the "share_token" field.
func ShareTokenNEQ(v string) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldShareToken, v))
}

// ShareTokenIn applies the In predicate on the "share_token" field.
func ShareTokenIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldShareToken, vs...))
}

// ShareTokenNotIn applies the NotIn predicate on the "share_token" field.
func ShareTokenNotIn(vs ...string) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldShareToken, vs...))
}

// ShareTokenGT applies the GT predicate on the "share_token" field.
func ShareTokenGT(v string) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldShareToken, v))
}

// ShareTokenGTE applies the GTE predicate on the "share_token" field.
func ShareTokenGTE(v string) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldShareToken, v))
}

// ShareTokenLT applies the LT predicate on the "share_token" field.
func ShareTokenLT(v string) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldShareToken, v))
}

// ShareTokenLTE applies the LTE predicate on the "share_token" field.
func ShareTokenLTE(v string) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldShareToken, v))
}

// ShareTokenContains applies the Contains predicate on the "share_token" field.
func ShareTokenContains(v string) predicate.Note {
	return predicate.Note(sql.FieldContains(FieldShareToken, v))
}

// ShareTokenHasPrefix applies the HasPrefix predicate on the "share_token" field.
func ShareTokenHasPrefix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasPrefix(FieldShareToken, v))
}

// ShareTokenHasSuffix applies the HasSuffix predicate on the "share_token" field.
func ShareTokenHasSuffix(v string) predicate.Note {
	return predicate.Note(sql.FieldHasSuffix(FieldShareToken, v))
}

// ShareTokenIsNil applies the IsNil predicate on the "share_token" field.
func ShareTokenIsNil() predicate.Note {
	return predicate.Note(sql.FieldIsNull(FieldShareToken))
}

// ShareTokenNotNil applies the NotNil predicate on the "share_token" field.
func ShareTokenNotNil() predicate.Note {
	return predicate.Note(sql.FieldNotNull(FieldShareToken))
}

// ShareTokenEqualFold applies the EqualFold predicate on the "share_token" field.
func ShareTokenEqualFold(v string) predicate.Note {
	return predicate.Note(sql.FieldEqualFold(FieldShareToken, v))
}

// ShareTokenContainsFold applies the ContainsFold predicate on the "share_token" field.
func ShareTokenContainsFold(v string) predicate.Note {
	return predicate.Note(sql.FieldContainsFold(FieldShareToken, v))
}

// AiProcessingEQ applies the EQ predicate on the "ai_processing" field.
func AiProcessingEQ(v bool) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldAiProcessing, v))
}

// AiProcessingNEQ applies the NEQ predicate on the "ai_processing" field.
func AiProcessingNEQ(v bool) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldAiProcessing, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikes applies the HasEdge predicate on the "likes" edge.
func HasLikes() predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LikesTable, LikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikesWith applies the HasEdge predicate on the "likes" edge with a given conditions (other predicates).
func HasLikesWith(preds ...predicate.NoteLike) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := newLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReposts applies the HasEdge predicate on the "reposts" edge.
func HasReposts() predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepostsTable, RepostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepostsWith applies the HasEdge predicate on the "reposts" edge with a given conditions (other predicates).
func HasRepostsWith(preds ...predicate.NoteRepost) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := newRepostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Note) predicate.Note {
	return predicate.Note(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Note) predicate.Note {
	return predicate.Note(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Note) predicate.Note {
	return predicate.Note(sql.NotPredicates(p))
}
