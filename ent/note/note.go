// Code generated by ent, DO NOT EDIT.

package note

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the note type in the database.
	Label = "note"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldResources holds the string denoting the resources field in the database.
	FieldResources = "resources"
	// FieldAiCurriculum holds the string denoting the ai_curriculum field in the database.
	FieldAiCurriculum = "ai_curriculum"
	// FieldVisibility holds the string denoting the visibility field in the database.
	FieldVisibility = "visibility"
	// FieldPermissionLevel holds the string denoting the permission_level field in the database.
	FieldPermissionLevel = "permission_level"
	// FieldShareToken holds the string denoting the share_token field in the database.
	FieldShareToken = "share_token"
	// FieldAiProcessing holds the string denoting the ai_processing field in the database.
	FieldAiProcessing = "ai_processing"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeLikes holds the string denoting the likes edge name in mutations.
	EdgeLikes = "likes"
	// EdgeReposts holds the string denoting the reposts edge name in mutations.
	EdgeReposts = "reposts"
	// Table holds the table name of the note in the database.
	Table = "notes"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "notes"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_notes"
	// LikesTable is the table that holds the likes relation/edge.
	LikesTable = "note_likes"
	// LikesInverseTable is the table name for the NoteLike entity.
	// It exists in this package in order to avoid circular dependency with the "notelike" package.
	LikesInverseTable = "note_likes"
	// LikesColumn is the table column denoting the likes relation/edge.
	LikesColumn = "note_likes"
	// RepostsTable is the table that holds the reposts relation/edge.
	RepostsTable = "note_reposts"
	// RepostsInverseTable is the table name for the NoteRepost entity.
	// It exists in this package in order to avoid circular dependency with the "noterepost" package.
	RepostsInverseTable = "note_reposts"
	// RepostsColumn is the table column denoting the reposts relation/edge.
	RepostsColumn = "note_reposts"
)

// Columns holds all SQL columns for note fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldContent,
	FieldResources,
	FieldAiCurriculum,
	FieldVisibility,
	FieldPermissionLevel,
	FieldShareToken,
	FieldAiProcessing,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_notes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultAiProcessing holds the default value on creation for the "ai_processing" field.
	DefaultAiProcessing bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Visibility defines the type for the "visibility" enum field.
type Visibility string

// VisibilityPrivate is the default value of the Visibility enum.
const DefaultVisibility = VisibilityPrivate

// Visibility values.
const (
	VisibilityPrivate Visibility = "private"
	VisibilityPublic  Visibility = "public"
)

func (v Visibility) String() string {
	return string(v)
}

// VisibilityValidator is a validator for the "visibility" field enum values. It is called by the builders before save.
func VisibilityValidator(v Visibility) error {
	switch v {
	case VisibilityPrivate, VisibilityPublic:
		return nil
	default:
		return fmt.Errorf("note: invalid enum value for visibility field: %q", v)
	}
}

// PermissionLevel defines the type for the "permission_level" enum field.
type PermissionLevel string

// PermissionLevelReadOnly is the default value of the PermissionLevel enum.
const DefaultPermissionLevel = PermissionLevelReadOnly

// PermissionLevel values.
const (
	PermissionLevelReadOnly          PermissionLevel = "read_only"
	PermissionLevelReadWrite         PermissionLevel = "read_write"
	PermissionLevelReadWriteApproval PermissionLevel = "read_write_approval"
)

func (pl PermissionLevel) String() string {
	return string(pl)
}

// PermissionLevelValidator is a validator for the "permission_level" field enum values. It is called by the builders before save.
func PermissionLevelValidator(pl PermissionLevel) error {
	switch pl {
	case PermissionLevelReadOnly, PermissionLevelReadWrite, PermissionLevelReadWriteApproval:
		return nil
	default:
		return fmt.Errorf("note: invalid enum value for permission_level field: %q", pl)
	}
}

// OrderOption defines the ordering options for the Note queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByAiCurriculum orders the results by the ai_curriculum field.
func ByAiCurriculum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAiCurriculum, opts...).ToFunc()
}

// ByVisibility orders the results by the visibility field.
func ByVisibility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibility, opts...).ToFunc()
}

// ByPermissionLevel orders the results by the permission_level field.
func ByPermissionLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissionLevel, opts...).ToFunc()
}

// ByShareToken orders the results by the share_token field.
func ByShareToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShareToken, opts...).ToFunc()
}

// ByAiProcessing orders the results by the ai_processing field.
func ByAiProcessing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAiProcessing, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByLikesCount orders the results by likes count.
func ByLikesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikesStep(), opts...)
	}
}

// ByLikes orders the results by likes terms.
func ByLikes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRepostsCount orders the results by reposts count.
func ByRepostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepostsStep(), opts...)
	}
}

// ByReposts orders the results by reposts terms.
func ByReposts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newLikesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LikesTable, LikesColumn),
	)
}
func newRepostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RepostsTable, RepostsColumn),
	)
}
