// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/notelike"
	"github.com/r-scheele/zero/ent/predicate"
	"github.com/r-scheele/zero/ent/user"
)

// NoteLikeUpdate is the builder for updating NoteLike entities.
type NoteLikeUpdate struct {
	config
	hooks    []Hook
	mutation *NoteLikeMutation
}

// Where appends a list predicates to the NoteLikeUpdate builder.
func (nlu *NoteLikeUpdate) Where(ps ...predicate.NoteLike) *NoteLikeUpdate {
	nlu.mutation.Where(ps...)
	return nlu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nlu *NoteLikeUpdate) SetUserID(id int) *NoteLikeUpdate {
	nlu.mutation.SetUserID(id)
	return nlu
}

// SetUser sets the "user" edge to the User entity.
func (nlu *NoteLikeUpdate) SetUser(u *User) *NoteLikeUpdate {
	return nlu.SetUserID(u.ID)
}

// SetNoteID sets the "note" edge to the Note entity by ID.
func (nlu *NoteLikeUpdate) SetNoteID(id int) *NoteLikeUpdate {
	nlu.mutation.SetNoteID(id)
	return nlu
}

// SetNote sets the "note" edge to the Note entity.
func (nlu *NoteLikeUpdate) SetNote(n *Note) *NoteLikeUpdate {
	return nlu.SetNoteID(n.ID)
}

// Mutation returns the NoteLikeMutation object of the builder.
func (nlu *NoteLikeUpdate) Mutation() *NoteLikeMutation {
	return nlu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (nlu *NoteLikeUpdate) ClearUser() *NoteLikeUpdate {
	nlu.mutation.ClearUser()
	return nlu
}

// ClearNote clears the "note" edge to the Note entity.
func (nlu *NoteLikeUpdate) ClearNote() *NoteLikeUpdate {
	nlu.mutation.ClearNote()
	return nlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nlu *NoteLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nlu.sqlSave, nlu.mutation, nlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nlu *NoteLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := nlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nlu *NoteLikeUpdate) Exec(ctx context.Context) error {
	_, err := nlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nlu *NoteLikeUpdate) ExecX(ctx context.Context) {
	if err := nlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nlu *NoteLikeUpdate) check() error {
	if nlu.mutation.UserCleared() && len(nlu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NoteLike.user"`)
	}
	if nlu.mutation.NoteCleared() && len(nlu.mutation.NoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NoteLike.note"`)
	}
	return nil
}

func (nlu *NoteLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notelike.Table, notelike.Columns, sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt))
	if ps := nlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nlu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.UserTable,
			Columns: []string{notelike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nlu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.UserTable,
			Columns: []string{notelike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nlu.mutation.NoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.NoteTable,
			Columns: []string{notelike.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nlu.mutation.NoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.NoteTable,
			Columns: []string{notelike.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notelike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nlu.mutation.done = true
	return n, nil
}

// NoteLikeUpdateOne is the builder for updating a single NoteLike entity.
type NoteLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NoteLikeMutation
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nluo *NoteLikeUpdateOne) SetUserID(id int) *NoteLikeUpdateOne {
	nluo.mutation.SetUserID(id)
	return nluo
}

// SetUser sets the "user" edge to the User entity.
func (nluo *NoteLikeUpdateOne) SetUser(u *User) *NoteLikeUpdateOne {
	return nluo.SetUserID(u.ID)
}

// SetNoteID sets the "note" edge to the Note entity by ID.
func (nluo *NoteLikeUpdateOne) SetNoteID(id int) *NoteLikeUpdateOne {
	nluo.mutation.SetNoteID(id)
	return nluo
}

// SetNote sets the "note" edge to the Note entity.
func (nluo *NoteLikeUpdateOne) SetNote(n *Note) *NoteLikeUpdateOne {
	return nluo.SetNoteID(n.ID)
}

// Mutation returns the NoteLikeMutation object of the builder.
func (nluo *NoteLikeUpdateOne) Mutation() *NoteLikeMutation {
	return nluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (nluo *NoteLikeUpdateOne) ClearUser() *NoteLikeUpdateOne {
	nluo.mutation.ClearUser()
	return nluo
}

// ClearNote clears the "note" edge to the Note entity.
func (nluo *NoteLikeUpdateOne) ClearNote() *NoteLikeUpdateOne {
	nluo.mutation.ClearNote()
	return nluo
}

// Where appends a list predicates to the NoteLikeUpdate builder.
func (nluo *NoteLikeUpdateOne) Where(ps ...predicate.NoteLike) *NoteLikeUpdateOne {
	nluo.mutation.Where(ps...)
	return nluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nluo *NoteLikeUpdateOne) Select(field string, fields ...string) *NoteLikeUpdateOne {
	nluo.fields = append([]string{field}, fields...)
	return nluo
}

// Save executes the query and returns the updated NoteLike entity.
func (nluo *NoteLikeUpdateOne) Save(ctx context.Context) (*NoteLike, error) {
	return withHooks(ctx, nluo.sqlSave, nluo.mutation, nluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nluo *NoteLikeUpdateOne) SaveX(ctx context.Context) *NoteLike {
	node, err := nluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nluo *NoteLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := nluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nluo *NoteLikeUpdateOne) ExecX(ctx context.Context) {
	if err := nluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nluo *NoteLikeUpdateOne) check() error {
	if nluo.mutation.UserCleared() && len(nluo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NoteLike.user"`)
	}
	if nluo.mutation.NoteCleared() && len(nluo.mutation.NoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NoteLike.note"`)
	}
	return nil
}

func (nluo *NoteLikeUpdateOne) sqlSave(ctx context.Context) (_node *NoteLike, err error) {
	if err := nluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notelike.Table, notelike.Columns, sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt))
	id, ok := nluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NoteLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notelike.FieldID)
		for _, f := range fields {
			if !notelike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notelike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.UserTable,
			Columns: []string{notelike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.UserTable,
			Columns: []string{notelike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nluo.mutation.NoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.NoteTable,
			Columns: []string{notelike.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nluo.mutation.NoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notelike.NoteTable,
			Columns: []string{notelike.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NoteLike{config: nluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notelike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nluo.mutation.done = true
	return _node, nil
}
