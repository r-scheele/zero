// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/noterepost"
	"github.com/r-scheele/zero/ent/user"
)

// NoteRepostCreate is the builder for creating a NoteRepost entity.
type NoteRepostCreate struct {
	config
	mutation *NoteRepostMutation
	hooks    []Hook
}

// SetComment sets the "comment" field.
func (nrc *NoteRepostCreate) SetComment(s string) *NoteRepostCreate {
	nrc.mutation.SetComment(s)
	return nrc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nrc *NoteRepostCreate) SetNillableComment(s *string) *NoteRepostCreate {
	if s != nil {
		nrc.SetComment(*s)
	}
	return nrc
}

// SetCreatedAt sets the "created_at" field.
func (nrc *NoteRepostCreate) SetCreatedAt(t time.Time) *NoteRepostCreate {
	nrc.mutation.SetCreatedAt(t)
	return nrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nrc *NoteRepostCreate) SetNillableCreatedAt(t *time.Time) *NoteRepostCreate {
	if t != nil {
		nrc.SetCreatedAt(*t)
	}
	return nrc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nrc *NoteRepostCreate) SetUserID(id int) *NoteRepostCreate {
	nrc.mutation.SetUserID(id)
	return nrc
}

// SetUser sets the "user" edge to the User entity.
func (nrc *NoteRepostCreate) SetUser(u *User) *NoteRepostCreate {
	return nrc.SetUserID(u.ID)
}

// SetNoteID sets the "note" edge to the Note entity by ID.
func (nrc *NoteRepostCreate) SetNoteID(id int) *NoteRepostCreate {
	nrc.mutation.SetNoteID(id)
	return nrc
}

// SetNote sets the "note" edge to the Note entity.
func (nrc *NoteRepostCreate) SetNote(n *Note) *NoteRepostCreate {
	return nrc.SetNoteID(n.ID)
}

// Mutation returns the NoteRepostMutation object of the builder.
func (nrc *NoteRepostCreate) Mutation() *NoteRepostMutation {
	return nrc.mutation
}

// Save creates the NoteRepost in the database.
func (nrc *NoteRepostCreate) Save(ctx context.Context) (*NoteRepost, error) {
	nrc.defaults()
	return withHooks(ctx, nrc.sqlSave, nrc.mutation, nrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nrc *NoteRepostCreate) SaveX(ctx context.Context) *NoteRepost {
	v, err := nrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nrc *NoteRepostCreate) Exec(ctx context.Context) error {
	_, err := nrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nrc *NoteRepostCreate) ExecX(ctx context.Context) {
	if err := nrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nrc *NoteRepostCreate) defaults() {
	if _, ok := nrc.mutation.CreatedAt(); !ok {
		v := noterepost.DefaultCreatedAt()
		nrc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nrc *NoteRepostCreate) check() error {
	if _, ok := nrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NoteRepost.created_at"`)}
	}
	if len(nrc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "NoteRepost.user"`)}
	}
	if len(nrc.mutation.NoteIDs()) == 0 {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required edge "NoteRepost.note"`)}
	}
	return nil
}

func (nrc *NoteRepostCreate) sqlSave(ctx context.Context) (*NoteRepost, error) {
	if err := nrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nrc.mutation.id = &_node.ID
	nrc.mutation.done = true
	return _node, nil
}

func (nrc *NoteRepostCreate) createSpec() (*NoteRepost, *sqlgraph.CreateSpec) {
	var (
		_node = &NoteRepost{config: nrc.config}
		_spec = sqlgraph.NewCreateSpec(noterepost.Table, sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt))
	)
	if value, ok := nrc.mutation.Comment(); ok {
		_spec.SetField(noterepost.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := nrc.mutation.CreatedAt(); ok {
		_spec.SetField(noterepost.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := nrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.UserTable,
			Columns: []string{noterepost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_note_reposts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nrc.mutation.NoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   noterepost.NoteTable,
			Columns: []string{noterepost.NoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.note_reposts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NoteRepostCreateBulk is the builder for creating many NoteRepost entities in bulk.
type NoteRepostCreateBulk struct {
	config
	err      error
	builders []*NoteRepostCreate
}

// Save creates the NoteRepost entities in the database.
func (nrcb *NoteRepostCreateBulk) Save(ctx context.Context) ([]*NoteRepost, error) {
	if nrcb.err != nil {
		return nil, nrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nrcb.builders))
	nodes := make([]*NoteRepost, len(nrcb.builders))
	mutators := make([]Mutator, len(nrcb.builders))
	for i := range nrcb.builders {
		func(i int, root context.Context) {
			builder := nrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NoteRepostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nrcb *NoteRepostCreateBulk) SaveX(ctx context.Context) []*NoteRepost {
	v, err := nrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nrcb *NoteRepostCreateBulk) Exec(ctx context.Context) error {
	_, err := nrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nrcb *NoteRepostCreateBulk) ExecX(ctx context.Context) {
	if err := nrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
