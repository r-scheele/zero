// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/notelike"
	"github.com/r-scheele/zero/ent/noterepost"
	"github.com/r-scheele/zero/ent/passwordtoken"
	"github.com/r-scheele/zero/ent/schema"
	"github.com/r-scheele/zero/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	noteFields := schema.Note{}.Fields()
	_ = noteFields
	// noteDescTitle is the schema descriptor for title field.
	noteDescTitle := noteFields[0].Descriptor()
	// note.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	note.TitleValidator = noteDescTitle.Validators[0].(func(string) error)
	// noteDescAiProcessing is the schema descriptor for ai_processing field.
	noteDescAiProcessing := noteFields[8].Descriptor()
	// note.DefaultAiProcessing holds the default value on creation for the ai_processing field.
	note.DefaultAiProcessing = noteDescAiProcessing.Default.(bool)
	// noteDescCreatedAt is the schema descriptor for created_at field.
	noteDescCreatedAt := noteFields[9].Descriptor()
	// note.DefaultCreatedAt holds the default value on creation for the created_at field.
	note.DefaultCreatedAt = noteDescCreatedAt.Default.(func() time.Time)
	// noteDescUpdatedAt is the schema descriptor for updated_at field.
	noteDescUpdatedAt := noteFields[10].Descriptor()
	// note.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	note.DefaultUpdatedAt = noteDescUpdatedAt.Default.(func() time.Time)
	// note.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	note.UpdateDefaultUpdatedAt = noteDescUpdatedAt.UpdateDefault.(func() time.Time)
	notelikeFields := schema.NoteLike{}.Fields()
	_ = notelikeFields
	// notelikeDescCreatedAt is the schema descriptor for created_at field.
	notelikeDescCreatedAt := notelikeFields[0].Descriptor()
	// notelike.DefaultCreatedAt holds the default value on creation for the created_at field.
	notelike.DefaultCreatedAt = notelikeDescCreatedAt.Default.(func() time.Time)
	noterepostFields := schema.NoteRepost{}.Fields()
	_ = noterepostFields
	// noterepostDescCreatedAt is the schema descriptor for created_at field.
	noterepostDescCreatedAt := noterepostFields[1].Descriptor()
	// noterepost.DefaultCreatedAt holds the default value on creation for the created_at field.
	noterepost.DefaultCreatedAt = noterepostDescCreatedAt.Default.(func() time.Time)
	passwordtokenFields := schema.PasswordToken{}.Fields()
	_ = passwordtokenFields
	// passwordtokenDescToken is the schema descriptor for token field.
	passwordtokenDescToken := passwordtokenFields[0].Descriptor()
	// passwordtoken.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	passwordtoken.TokenValidator = passwordtokenDescToken.Validators[0].(func(string) error)
	// passwordtokenDescCreatedAt is the schema descriptor for created_at field.
	passwordtokenDescCreatedAt := passwordtokenFields[2].Descriptor()
	// passwordtoken.DefaultCreatedAt holds the default value on creation for the created_at field.
	passwordtoken.DefaultCreatedAt = passwordtokenDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescPhoneNumber is the schema descriptor for phone_number field.
	userDescPhoneNumber := userFields[1].Descriptor()
	// user.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	user.PhoneNumberValidator = func() func(string) error {
		validators := userDescPhoneNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone_number string) error {
			for _, fn := range fns {
				if err := fn(phone_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescVerified is the schema descriptor for verified field.
	userDescVerified := userFields[4].Descriptor()
	// user.DefaultVerified holds the default value on creation for the verified field.
	user.DefaultVerified = userDescVerified.Default.(bool)
	// userDescAdmin is the schema descriptor for admin field.
	userDescAdmin := userFields[6].Descriptor()
	// user.DefaultAdmin holds the default value on creation for the admin field.
	user.DefaultAdmin = userDescAdmin.Default.(bool)
	// userDescDarkMode is the schema descriptor for dark_mode field.
	userDescDarkMode := userFields[9].Descriptor()
	// user.DefaultDarkMode holds the default value on creation for the dark_mode field.
	user.DefaultDarkMode = userDescDarkMode.Default.(bool)
	// userDescBio is the schema descriptor for bio field.
	userDescBio := userFields[10].Descriptor()
	// user.BioValidator is a validator for the "bio" field. It is called by the builders before save.
	user.BioValidator = userDescBio.Validators[0].(func(string) error)
	// userDescEmailNotifications is the schema descriptor for email_notifications field.
	userDescEmailNotifications := userFields[11].Descriptor()
	// user.DefaultEmailNotifications holds the default value on creation for the email_notifications field.
	user.DefaultEmailNotifications = userDescEmailNotifications.Default.(bool)
	// userDescSmsNotifications is the schema descriptor for sms_notifications field.
	userDescSmsNotifications := userFields[12].Descriptor()
	// user.DefaultSmsNotifications holds the default value on creation for the sms_notifications field.
	user.DefaultSmsNotifications = userDescSmsNotifications.Default.(bool)
	// userDescIsActive is the schema descriptor for is_active field.
	userDescIsActive := userFields[13].Descriptor()
	// user.DefaultIsActive holds the default value on creation for the is_active field.
	user.DefaultIsActive = userDescIsActive.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[15].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[16].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}
