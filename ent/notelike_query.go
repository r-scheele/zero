// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/notelike"
	"github.com/r-scheele/zero/ent/predicate"
	"github.com/r-scheele/zero/ent/user"
)

// NoteLikeQuery is the builder for querying NoteLike entities.
type NoteLikeQuery struct {
	config
	ctx        *QueryContext
	order      []notelike.OrderOption
	inters     []Interceptor
	predicates []predicate.NoteLike
	withUser   *UserQuery
	withNote   *NoteQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NoteLikeQuery builder.
func (nlq *NoteLikeQuery) Where(ps ...predicate.NoteLike) *NoteLikeQuery {
	nlq.predicates = append(nlq.predicates, ps...)
	return nlq
}

// Limit the number of records to be returned by this query.
func (nlq *NoteLikeQuery) Limit(limit int) *NoteLikeQuery {
	nlq.ctx.Limit = &limit
	return nlq
}

// Offset to start from.
func (nlq *NoteLikeQuery) Offset(offset int) *NoteLikeQuery {
	nlq.ctx.Offset = &offset
	return nlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nlq *NoteLikeQuery) Unique(unique bool) *NoteLikeQuery {
	nlq.ctx.Unique = &unique
	return nlq
}

// Order specifies how the records should be ordered.
func (nlq *NoteLikeQuery) Order(o ...notelike.OrderOption) *NoteLikeQuery {
	nlq.order = append(nlq.order, o...)
	return nlq
}

// QueryUser chains the current query on the "user" edge.
func (nlq *NoteLikeQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: nlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notelike.Table, notelike.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notelike.UserTable, notelike.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(nlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNote chains the current query on the "note" edge.
func (nlq *NoteLikeQuery) QueryNote() *NoteQuery {
	query := (&NoteClient{config: nlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notelike.Table, notelike.FieldID, selector),
			sqlgraph.To(note.Table, note.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notelike.NoteTable, notelike.NoteColumn),
		)
		fromU = sqlgraph.SetNeighbors(nlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NoteLike entity from the query.
// Returns a *NotFoundError when no NoteLike was found.
func (nlq *NoteLikeQuery) First(ctx context.Context) (*NoteLike, error) {
	nodes, err := nlq.Limit(1).All(setContextOp(ctx, nlq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{notelike.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nlq *NoteLikeQuery) FirstX(ctx context.Context) *NoteLike {
	node, err := nlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NoteLike ID from the query.
// Returns a *NotFoundError when no NoteLike ID was found.
func (nlq *NoteLikeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nlq.Limit(1).IDs(setContextOp(ctx, nlq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{notelike.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nlq *NoteLikeQuery) FirstIDX(ctx context.Context) int {
	id, err := nlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NoteLike entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NoteLike entity is found.
// Returns a *NotFoundError when no NoteLike entities are found.
func (nlq *NoteLikeQuery) Only(ctx context.Context) (*NoteLike, error) {
	nodes, err := nlq.Limit(2).All(setContextOp(ctx, nlq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{notelike.Label}
	default:
		return nil, &NotSingularError{notelike.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nlq *NoteLikeQuery) OnlyX(ctx context.Context) *NoteLike {
	node, err := nlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NoteLike ID in the query.
// Returns a *NotSingularError when more than one NoteLike ID is found.
// Returns a *NotFoundError when no entities are found.
func (nlq *NoteLikeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nlq.Limit(2).IDs(setContextOp(ctx, nlq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{notelike.Label}
	default:
		err = &NotSingularError{notelike.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nlq *NoteLikeQuery) OnlyIDX(ctx context.Context) int {
	id, err := nlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NoteLikes.
func (nlq *NoteLikeQuery) All(ctx context.Context) ([]*NoteLike, error) {
	ctx = setContextOp(ctx, nlq.ctx, ent.OpQueryAll)
	if err := nlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NoteLike, *NoteLikeQuery]()
	return withInterceptors[[]*NoteLike](ctx, nlq, qr, nlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (nlq *NoteLikeQuery) AllX(ctx context.Context) []*NoteLike {
	nodes, err := nlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NoteLike IDs.
func (nlq *NoteLikeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if nlq.ctx.Unique == nil && nlq.path != nil {
		nlq.Unique(true)
	}
	ctx = setContextOp(ctx, nlq.ctx, ent.OpQueryIDs)
	if err = nlq.Select(notelike.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nlq *NoteLikeQuery) IDsX(ctx context.Context) []int {
	ids, err := nlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nlq *NoteLikeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, nlq.ctx, ent.OpQueryCount)
	if err := nlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, nlq, querierCount[*NoteLikeQuery](), nlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (nlq *NoteLikeQuery) CountX(ctx context.Context) int {
	count, err := nlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nlq *NoteLikeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, nlq.ctx, ent.OpQueryExist)
	switch _, err := nlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (nlq *NoteLikeQuery) ExistX(ctx context.Context) bool {
	exist, err := nlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NoteLikeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nlq *NoteLikeQuery) Clone() *NoteLikeQuery {
	if nlq == nil {
		return nil
	}
	return &NoteLikeQuery{
		config:     nlq.config,
		ctx:        nlq.ctx.Clone(),
		order:      append([]notelike.OrderOption{}, nlq.order...),
		inters:     append([]Interceptor{}, nlq.inters...),
		predicates: append([]predicate.NoteLike{}, nlq.predicates...),
		withUser:   nlq.withUser.Clone(),
		withNote:   nlq.withNote.Clone(),
		// clone intermediate query.
		sql:  nlq.sql.Clone(),
		path: nlq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (nlq *NoteLikeQuery) WithUser(opts ...func(*UserQuery)) *NoteLikeQuery {
	query := (&UserClient{config: nlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nlq.withUser = query
	return nlq
}

// WithNote tells the query-builder to eager-load the nodes that are connected to
// the "note" edge. The optional arguments are used to configure the query builder of the edge.
func (nlq *NoteLikeQuery) WithNote(opts ...func(*NoteQuery)) *NoteLikeQuery {
	query := (&NoteClient{config: nlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nlq.withNote = query
	return nlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NoteLike.Query().
//		GroupBy(notelike.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nlq *NoteLikeQuery) GroupBy(field string, fields ...string) *NoteLikeGroupBy {
	nlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NoteLikeGroupBy{build: nlq}
	grbuild.flds = &nlq.ctx.Fields
	grbuild.label = notelike.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.NoteLike.Query().
//		Select(notelike.FieldCreatedAt).
//		Scan(ctx, &v)
func (nlq *NoteLikeQuery) Select(fields ...string) *NoteLikeSelect {
	nlq.ctx.Fields = append(nlq.ctx.Fields, fields...)
	sbuild := &NoteLikeSelect{NoteLikeQuery: nlq}
	sbuild.label = notelike.Label
	sbuild.flds, sbuild.scan = &nlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NoteLikeSelect configured with the given aggregations.
func (nlq *NoteLikeQuery) Aggregate(fns ...AggregateFunc) *NoteLikeSelect {
	return nlq.Select().Aggregate(fns...)
}

func (nlq *NoteLikeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range nlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, nlq); err != nil {
				return err
			}
		}
	}
	for _, f := range nlq.ctx.Fields {
		if !notelike.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nlq.path != nil {
		prev, err := nlq.path(ctx)
		if err != nil {
			return err
		}
		nlq.sql = prev
	}
	return nil
}

func (nlq *NoteLikeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NoteLike, error) {
	var (
		nodes       = []*NoteLike{}
		withFKs     = nlq.withFKs
		_spec       = nlq.querySpec()
		loadedTypes = [2]bool{
			nlq.withUser != nil,
			nlq.withNote != nil,
		}
	)
	if nlq.withUser != nil || nlq.withNote != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, notelike.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NoteLike).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NoteLike{config: nlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nlq.withUser; query != nil {
		if err := nlq.loadUser(ctx, query, nodes, nil,
			func(n *NoteLike, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := nlq.withNote; query != nil {
		if err := nlq.loadNote(ctx, query, nodes, nil,
			func(n *NoteLike, e *Note) { n.Edges.Note = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nlq *NoteLikeQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*NoteLike, init func(*NoteLike), assign func(*NoteLike, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NoteLike)
	for i := range nodes {
		if nodes[i].user_note_likes == nil {
			continue
		}
		fk := *nodes[i].user_note_likes
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_note_likes" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nlq *NoteLikeQuery) loadNote(ctx context.Context, query *NoteQuery, nodes []*NoteLike, init func(*NoteLike), assign func(*NoteLike, *Note)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NoteLike)
	for i := range nodes {
		if nodes[i].note_likes == nil {
			continue
		}
		fk := *nodes[i].note_likes
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(note.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "note_likes" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (nlq *NoteLikeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nlq.querySpec()
	_spec.Node.Columns = nlq.ctx.Fields
	if len(nlq.ctx.Fields) > 0 {
		_spec.Unique = nlq.ctx.Unique != nil && *nlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, nlq.driver, _spec)
}

func (nlq *NoteLikeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(notelike.Table, notelike.Columns, sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt))
	_spec.From = nlq.sql
	if unique := nlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if nlq.path != nil {
		_spec.Unique = true
	}
	if fields := nlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notelike.FieldID)
		for i := range fields {
			if fields[i] != notelike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nlq *NoteLikeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nlq.driver.Dialect())
	t1 := builder.Table(notelike.Table)
	columns := nlq.ctx.Fields
	if len(columns) == 0 {
		columns = notelike.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nlq.sql != nil {
		selector = nlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nlq.ctx.Unique != nil && *nlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range nlq.predicates {
		p(selector)
	}
	for _, p := range nlq.order {
		p(selector)
	}
	if offset := nlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NoteLikeGroupBy is the group-by builder for NoteLike entities.
type NoteLikeGroupBy struct {
	selector
	build *NoteLikeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nlgb *NoteLikeGroupBy) Aggregate(fns ...AggregateFunc) *NoteLikeGroupBy {
	nlgb.fns = append(nlgb.fns, fns...)
	return nlgb
}

// Scan applies the selector query and scans the result into the given value.
func (nlgb *NoteLikeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nlgb.build.ctx, ent.OpQueryGroupBy)
	if err := nlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NoteLikeQuery, *NoteLikeGroupBy](ctx, nlgb.build, nlgb, nlgb.build.inters, v)
}

func (nlgb *NoteLikeGroupBy) sqlScan(ctx context.Context, root *NoteLikeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(nlgb.fns))
	for _, fn := range nlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*nlgb.flds)+len(nlgb.fns))
		for _, f := range *nlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*nlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NoteLikeSelect is the builder for selecting fields of NoteLike entities.
type NoteLikeSelect struct {
	*NoteLikeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nls *NoteLikeSelect) Aggregate(fns ...AggregateFunc) *NoteLikeSelect {
	nls.fns = append(nls.fns, fns...)
	return nls
}

// Scan applies the selector query and scans the result into the given value.
func (nls *NoteLikeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nls.ctx, ent.OpQuerySelect)
	if err := nls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NoteLikeQuery, *NoteLikeSelect](ctx, nls.NoteLikeQuery, nls, nls.inters, v)
}

func (nls *NoteLikeSelect) sqlScan(ctx context.Context, root *NoteLikeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nls.fns))
	for _, fn := range nls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
