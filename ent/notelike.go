// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/notelike"
	"github.com/r-scheele/zero/ent/user"
)

// NoteLike is the model entity for the NoteLike schema.
type NoteLike struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NoteLikeQuery when eager-loading is set.
	Edges           NoteLikeEdges `json:"edges"`
	note_likes      *int
	user_note_likes *int
	selectValues    sql.SelectValues
}

// NoteLikeEdges holds the relations/edges for other nodes in the graph.
type NoteLikeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Note holds the value of the note edge.
	Note *Note `json:"note,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteLikeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// NoteOrErr returns the Note value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteLikeEdges) NoteOrErr() (*Note, error) {
	if e.Note != nil {
		return e.Note, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: note.Label}
	}
	return nil, &NotLoadedError{edge: "note"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NoteLike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notelike.FieldID:
			values[i] = new(sql.NullInt64)
		case notelike.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case notelike.ForeignKeys[0]: // note_likes
			values[i] = new(sql.NullInt64)
		case notelike.ForeignKeys[1]: // user_note_likes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NoteLike fields.
func (nl *NoteLike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notelike.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nl.ID = int(value.Int64)
		case notelike.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				nl.CreatedAt = value.Time
			}
		case notelike.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field note_likes", value)
			} else if value.Valid {
				nl.note_likes = new(int)
				*nl.note_likes = int(value.Int64)
			}
		case notelike.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_note_likes", value)
			} else if value.Valid {
				nl.user_note_likes = new(int)
				*nl.user_note_likes = int(value.Int64)
			}
		default:
			nl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NoteLike.
// This includes values selected through modifiers, order, etc.
func (nl *NoteLike) Value(name string) (ent.Value, error) {
	return nl.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the NoteLike entity.
func (nl *NoteLike) QueryUser() *UserQuery {
	return NewNoteLikeClient(nl.config).QueryUser(nl)
}

// QueryNote queries the "note" edge of the NoteLike entity.
func (nl *NoteLike) QueryNote() *NoteQuery {
	return NewNoteLikeClient(nl.config).QueryNote(nl)
}

// Update returns a builder for updating this NoteLike.
// Note that you need to call NoteLike.Unwrap() before calling this method if this NoteLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (nl *NoteLike) Update() *NoteLikeUpdateOne {
	return NewNoteLikeClient(nl.config).UpdateOne(nl)
}

// Unwrap unwraps the NoteLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nl *NoteLike) Unwrap() *NoteLike {
	_tx, ok := nl.config.driver.(*txDriver)
	if !ok {
		panic("ent: NoteLike is not a transactional entity")
	}
	nl.config.driver = _tx.drv
	return nl
}

// String implements the fmt.Stringer.
func (nl *NoteLike) String() string {
	var builder strings.Builder
	builder.WriteString("NoteLike(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(nl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NoteLikes is a parsable slice of NoteLike.
type NoteLikes []*NoteLike
