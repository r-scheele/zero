// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/noterepost"
	"github.com/r-scheele/zero/ent/user"
)

// NoteRepost is the model entity for the NoteRepost schema.
type NoteRepost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Optional comment when reposting
	Comment string `json:"comment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NoteRepostQuery when eager-loading is set.
	Edges             NoteRepostEdges `json:"edges"`
	note_reposts      *int
	user_note_reposts *int
	selectValues      sql.SelectValues
}

// NoteRepostEdges holds the relations/edges for other nodes in the graph.
type NoteRepostEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Note holds the value of the note edge.
	Note *Note `json:"note,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteRepostEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// NoteOrErr returns the Note value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteRepostEdges) NoteOrErr() (*Note, error) {
	if e.Note != nil {
		return e.Note, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: note.Label}
	}
	return nil, &NotLoadedError{edge: "note"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NoteRepost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case noterepost.FieldID:
			values[i] = new(sql.NullInt64)
		case noterepost.FieldComment:
			values[i] = new(sql.NullString)
		case noterepost.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case noterepost.ForeignKeys[0]: // note_reposts
			values[i] = new(sql.NullInt64)
		case noterepost.ForeignKeys[1]: // user_note_reposts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NoteRepost fields.
func (nr *NoteRepost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case noterepost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nr.ID = int(value.Int64)
		case noterepost.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				nr.Comment = value.String
			}
		case noterepost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				nr.CreatedAt = value.Time
			}
		case noterepost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field note_reposts", value)
			} else if value.Valid {
				nr.note_reposts = new(int)
				*nr.note_reposts = int(value.Int64)
			}
		case noterepost.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_note_reposts", value)
			} else if value.Valid {
				nr.user_note_reposts = new(int)
				*nr.user_note_reposts = int(value.Int64)
			}
		default:
			nr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NoteRepost.
// This includes values selected through modifiers, order, etc.
func (nr *NoteRepost) Value(name string) (ent.Value, error) {
	return nr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the NoteRepost entity.
func (nr *NoteRepost) QueryUser() *UserQuery {
	return NewNoteRepostClient(nr.config).QueryUser(nr)
}

// QueryNote queries the "note" edge of the NoteRepost entity.
func (nr *NoteRepost) QueryNote() *NoteQuery {
	return NewNoteRepostClient(nr.config).QueryNote(nr)
}

// Update returns a builder for updating this NoteRepost.
// Note that you need to call NoteRepost.Unwrap() before calling this method if this NoteRepost
// was returned from a transaction, and the transaction was committed or rolled back.
func (nr *NoteRepost) Update() *NoteRepostUpdateOne {
	return NewNoteRepostClient(nr.config).UpdateOne(nr)
}

// Unwrap unwraps the NoteRepost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nr *NoteRepost) Unwrap() *NoteRepost {
	_tx, ok := nr.config.driver.(*txDriver)
	if !ok {
		panic("ent: NoteRepost is not a transactional entity")
	}
	nr.config.driver = _tx.drv
	return nr
}

// String implements the fmt.Stringer.
func (nr *NoteRepost) String() string {
	var builder strings.Builder
	builder.WriteString("NoteRepost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nr.ID))
	builder.WriteString("comment=")
	builder.WriteString(nr.Comment)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(nr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NoteReposts is a parsable slice of NoteRepost.
type NoteReposts []*NoteRepost
