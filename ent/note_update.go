// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/notelike"
	"github.com/r-scheele/zero/ent/noterepost"
	"github.com/r-scheele/zero/ent/predicate"
	"github.com/r-scheele/zero/ent/user"
	"github.com/r-scheele/zero/pkg/types"
)

// NoteUpdate is the builder for updating Note entities.
type NoteUpdate struct {
	config
	hooks    []Hook
	mutation *NoteMutation
}

// Where appends a list predicates to the NoteUpdate builder.
func (nu *NoteUpdate) Where(ps ...predicate.Note) *NoteUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetTitle sets the "title" field.
func (nu *NoteUpdate) SetTitle(s string) *NoteUpdate {
	nu.mutation.SetTitle(s)
	return nu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableTitle(s *string) *NoteUpdate {
	if s != nil {
		nu.SetTitle(*s)
	}
	return nu
}

// SetDescription sets the "description" field.
func (nu *NoteUpdate) SetDescription(s string) *NoteUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableDescription(s *string) *NoteUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// ClearDescription clears the value of the "description" field.
func (nu *NoteUpdate) ClearDescription() *NoteUpdate {
	nu.mutation.ClearDescription()
	return nu
}

// SetContent sets the "content" field.
func (nu *NoteUpdate) SetContent(s string) *NoteUpdate {
	nu.mutation.SetContent(s)
	return nu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableContent(s *string) *NoteUpdate {
	if s != nil {
		nu.SetContent(*s)
	}
	return nu
}

// ClearContent clears the value of the "content" field.
func (nu *NoteUpdate) ClearContent() *NoteUpdate {
	nu.mutation.ClearContent()
	return nu
}

// SetResources sets the "resources" field.
func (nu *NoteUpdate) SetResources(t []types.Resource) *NoteUpdate {
	nu.mutation.SetResources(t)
	return nu
}

// AppendResources appends t to the "resources" field.
func (nu *NoteUpdate) AppendResources(t []types.Resource) *NoteUpdate {
	nu.mutation.AppendResources(t)
	return nu
}

// ClearResources clears the value of the "resources" field.
func (nu *NoteUpdate) ClearResources() *NoteUpdate {
	nu.mutation.ClearResources()
	return nu
}

// SetAiCurriculum sets the "ai_curriculum" field.
func (nu *NoteUpdate) SetAiCurriculum(s string) *NoteUpdate {
	nu.mutation.SetAiCurriculum(s)
	return nu
}

// SetNillableAiCurriculum sets the "ai_curriculum" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableAiCurriculum(s *string) *NoteUpdate {
	if s != nil {
		nu.SetAiCurriculum(*s)
	}
	return nu
}

// ClearAiCurriculum clears the value of the "ai_curriculum" field.
func (nu *NoteUpdate) ClearAiCurriculum() *NoteUpdate {
	nu.mutation.ClearAiCurriculum()
	return nu
}

// SetVisibility sets the "visibility" field.
func (nu *NoteUpdate) SetVisibility(n note.Visibility) *NoteUpdate {
	nu.mutation.SetVisibility(n)
	return nu
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableVisibility(n *note.Visibility) *NoteUpdate {
	if n != nil {
		nu.SetVisibility(*n)
	}
	return nu
}

// SetPermissionLevel sets the "permission_level" field.
func (nu *NoteUpdate) SetPermissionLevel(nl note.PermissionLevel) *NoteUpdate {
	nu.mutation.SetPermissionLevel(nl)
	return nu
}

// SetNillablePermissionLevel sets the "permission_level" field if the given value is not nil.
func (nu *NoteUpdate) SetNillablePermissionLevel(nl *note.PermissionLevel) *NoteUpdate {
	if nl != nil {
		nu.SetPermissionLevel(*nl)
	}
	return nu
}

// SetShareToken sets the "share_token" field.
func (nu *NoteUpdate) SetShareToken(s string) *NoteUpdate {
	nu.mutation.SetShareToken(s)
	return nu
}

// SetNillableShareToken sets the "share_token" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableShareToken(s *string) *NoteUpdate {
	if s != nil {
		nu.SetShareToken(*s)
	}
	return nu
}

// ClearShareToken clears the value of the "share_token" field.
func (nu *NoteUpdate) ClearShareToken() *NoteUpdate {
	nu.mutation.ClearShareToken()
	return nu
}

// SetAiProcessing sets the "ai_processing" field.
func (nu *NoteUpdate) SetAiProcessing(b bool) *NoteUpdate {
	nu.mutation.SetAiProcessing(b)
	return nu
}

// SetNillableAiProcessing sets the "ai_processing" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableAiProcessing(b *bool) *NoteUpdate {
	if b != nil {
		nu.SetAiProcessing(*b)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NoteUpdate) SetUpdatedAt(t time.Time) *NoteUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nu *NoteUpdate) SetOwnerID(id int) *NoteUpdate {
	nu.mutation.SetOwnerID(id)
	return nu
}

// SetOwner sets the "owner" edge to the User entity.
func (nu *NoteUpdate) SetOwner(u *User) *NoteUpdate {
	return nu.SetOwnerID(u.ID)
}

// AddLikeIDs adds the "likes" edge to the NoteLike entity by IDs.
func (nu *NoteUpdate) AddLikeIDs(ids ...int) *NoteUpdate {
	nu.mutation.AddLikeIDs(ids...)
	return nu
}

// AddLikes adds the "likes" edges to the NoteLike entity.
func (nu *NoteUpdate) AddLikes(n ...*NoteLike) *NoteUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddLikeIDs(ids...)
}

// AddRepostIDs adds the "reposts" edge to the NoteRepost entity by IDs.
func (nu *NoteUpdate) AddRepostIDs(ids ...int) *NoteUpdate {
	nu.mutation.AddRepostIDs(ids...)
	return nu
}

// AddReposts adds the "reposts" edges to the NoteRepost entity.
func (nu *NoteUpdate) AddReposts(n ...*NoteRepost) *NoteUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddRepostIDs(ids...)
}

// Mutation returns the NoteMutation object of the builder.
func (nu *NoteUpdate) Mutation() *NoteMutation {
	return nu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (nu *NoteUpdate) ClearOwner() *NoteUpdate {
	nu.mutation.ClearOwner()
	return nu
}

// ClearLikes clears all "likes" edges to the NoteLike entity.
func (nu *NoteUpdate) ClearLikes() *NoteUpdate {
	nu.mutation.ClearLikes()
	return nu
}

// RemoveLikeIDs removes the "likes" edge to NoteLike entities by IDs.
func (nu *NoteUpdate) RemoveLikeIDs(ids ...int) *NoteUpdate {
	nu.mutation.RemoveLikeIDs(ids...)
	return nu
}

// RemoveLikes removes "likes" edges to NoteLike entities.
func (nu *NoteUpdate) RemoveLikes(n ...*NoteLike) *NoteUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveLikeIDs(ids...)
}

// ClearReposts clears all "reposts" edges to the NoteRepost entity.
func (nu *NoteUpdate) ClearReposts() *NoteUpdate {
	nu.mutation.ClearReposts()
	return nu
}

// RemoveRepostIDs removes the "reposts" edge to NoteRepost entities by IDs.
func (nu *NoteUpdate) RemoveRepostIDs(ids ...int) *NoteUpdate {
	nu.mutation.RemoveRepostIDs(ids...)
	return nu
}

// RemoveReposts removes "reposts" edges to NoteRepost entities.
func (nu *NoteUpdate) RemoveReposts(n ...*NoteRepost) *NoteUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveRepostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NoteUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NoteUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NoteUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NoteUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NoteUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := note.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NoteUpdate) check() error {
	if v, ok := nu.mutation.Title(); ok {
		if err := note.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Note.title": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Visibility(); ok {
		if err := note.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Note.visibility": %w`, err)}
		}
	}
	if v, ok := nu.mutation.PermissionLevel(); ok {
		if err := note.PermissionLevelValidator(v); err != nil {
			return &ValidationError{Name: "permission_level", err: fmt.Errorf(`ent: validator failed for field "Note.permission_level": %w`, err)}
		}
	}
	if nu.mutation.OwnerCleared() && len(nu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Note.owner"`)
	}
	return nil
}

func (nu *NoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Title(); ok {
		_spec.SetField(note.FieldTitle, field.TypeString, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(note.FieldDescription, field.TypeString, value)
	}
	if nu.mutation.DescriptionCleared() {
		_spec.ClearField(note.FieldDescription, field.TypeString)
	}
	if value, ok := nu.mutation.Content(); ok {
		_spec.SetField(note.FieldContent, field.TypeString, value)
	}
	if nu.mutation.ContentCleared() {
		_spec.ClearField(note.FieldContent, field.TypeString)
	}
	if value, ok := nu.mutation.Resources(); ok {
		_spec.SetField(note.FieldResources, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedResources(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, note.FieldResources, value)
		})
	}
	if nu.mutation.ResourcesCleared() {
		_spec.ClearField(note.FieldResources, field.TypeJSON)
	}
	if value, ok := nu.mutation.AiCurriculum(); ok {
		_spec.SetField(note.FieldAiCurriculum, field.TypeString, value)
	}
	if nu.mutation.AiCurriculumCleared() {
		_spec.ClearField(note.FieldAiCurriculum, field.TypeString)
	}
	if value, ok := nu.mutation.Visibility(); ok {
		_spec.SetField(note.FieldVisibility, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.PermissionLevel(); ok {
		_spec.SetField(note.FieldPermissionLevel, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.ShareToken(); ok {
		_spec.SetField(note.FieldShareToken, field.TypeString, value)
	}
	if nu.mutation.ShareTokenCleared() {
		_spec.ClearField(note.FieldShareToken, field.TypeString)
	}
	if value, ok := nu.mutation.AiProcessing(); ok {
		_spec.SetField(note.FieldAiProcessing, field.TypeBool, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(note.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.LikesTable,
			Columns: []string{note.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedLikesIDs(); len(nodes) > 0 && !nu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.LikesTable,
			Columns: []string{note.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.LikesTable,
			Columns: []string{note.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.RepostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.RepostsTable,
			Columns: []string{note.RepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedRepostsIDs(); len(nodes) > 0 && !nu.mutation.RepostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.RepostsTable,
			Columns: []string{note.RepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RepostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.RepostsTable,
			Columns: []string{note.RepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NoteUpdateOne is the builder for updating a single Note entity.
type NoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NoteMutation
}

// SetTitle sets the "title" field.
func (nuo *NoteUpdateOne) SetTitle(s string) *NoteUpdateOne {
	nuo.mutation.SetTitle(s)
	return nuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableTitle(s *string) *NoteUpdateOne {
	if s != nil {
		nuo.SetTitle(*s)
	}
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NoteUpdateOne) SetDescription(s string) *NoteUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableDescription(s *string) *NoteUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// ClearDescription clears the value of the "description" field.
func (nuo *NoteUpdateOne) ClearDescription() *NoteUpdateOne {
	nuo.mutation.ClearDescription()
	return nuo
}

// SetContent sets the "content" field.
func (nuo *NoteUpdateOne) SetContent(s string) *NoteUpdateOne {
	nuo.mutation.SetContent(s)
	return nuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableContent(s *string) *NoteUpdateOne {
	if s != nil {
		nuo.SetContent(*s)
	}
	return nuo
}

// ClearContent clears the value of the "content" field.
func (nuo *NoteUpdateOne) ClearContent() *NoteUpdateOne {
	nuo.mutation.ClearContent()
	return nuo
}

// SetResources sets the "resources" field.
func (nuo *NoteUpdateOne) SetResources(t []types.Resource) *NoteUpdateOne {
	nuo.mutation.SetResources(t)
	return nuo
}

// AppendResources appends t to the "resources" field.
func (nuo *NoteUpdateOne) AppendResources(t []types.Resource) *NoteUpdateOne {
	nuo.mutation.AppendResources(t)
	return nuo
}

// ClearResources clears the value of the "resources" field.
func (nuo *NoteUpdateOne) ClearResources() *NoteUpdateOne {
	nuo.mutation.ClearResources()
	return nuo
}

// SetAiCurriculum sets the "ai_curriculum" field.
func (nuo *NoteUpdateOne) SetAiCurriculum(s string) *NoteUpdateOne {
	nuo.mutation.SetAiCurriculum(s)
	return nuo
}

// SetNillableAiCurriculum sets the "ai_curriculum" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableAiCurriculum(s *string) *NoteUpdateOne {
	if s != nil {
		nuo.SetAiCurriculum(*s)
	}
	return nuo
}

// ClearAiCurriculum clears the value of the "ai_curriculum" field.
func (nuo *NoteUpdateOne) ClearAiCurriculum() *NoteUpdateOne {
	nuo.mutation.ClearAiCurriculum()
	return nuo
}

// SetVisibility sets the "visibility" field.
func (nuo *NoteUpdateOne) SetVisibility(n note.Visibility) *NoteUpdateOne {
	nuo.mutation.SetVisibility(n)
	return nuo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableVisibility(n *note.Visibility) *NoteUpdateOne {
	if n != nil {
		nuo.SetVisibility(*n)
	}
	return nuo
}

// SetPermissionLevel sets the "permission_level" field.
func (nuo *NoteUpdateOne) SetPermissionLevel(nl note.PermissionLevel) *NoteUpdateOne {
	nuo.mutation.SetPermissionLevel(nl)
	return nuo
}

// SetNillablePermissionLevel sets the "permission_level" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillablePermissionLevel(nl *note.PermissionLevel) *NoteUpdateOne {
	if nl != nil {
		nuo.SetPermissionLevel(*nl)
	}
	return nuo
}

// SetShareToken sets the "share_token" field.
func (nuo *NoteUpdateOne) SetShareToken(s string) *NoteUpdateOne {
	nuo.mutation.SetShareToken(s)
	return nuo
}

// SetNillableShareToken sets the "share_token" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableShareToken(s *string) *NoteUpdateOne {
	if s != nil {
		nuo.SetShareToken(*s)
	}
	return nuo
}

// ClearShareToken clears the value of the "share_token" field.
func (nuo *NoteUpdateOne) ClearShareToken() *NoteUpdateOne {
	nuo.mutation.ClearShareToken()
	return nuo
}

// SetAiProcessing sets the "ai_processing" field.
func (nuo *NoteUpdateOne) SetAiProcessing(b bool) *NoteUpdateOne {
	nuo.mutation.SetAiProcessing(b)
	return nuo
}

// SetNillableAiProcessing sets the "ai_processing" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableAiProcessing(b *bool) *NoteUpdateOne {
	if b != nil {
		nuo.SetAiProcessing(*b)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NoteUpdateOne) SetUpdatedAt(t time.Time) *NoteUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (nuo *NoteUpdateOne) SetOwnerID(id int) *NoteUpdateOne {
	nuo.mutation.SetOwnerID(id)
	return nuo
}

// SetOwner sets the "owner" edge to the User entity.
func (nuo *NoteUpdateOne) SetOwner(u *User) *NoteUpdateOne {
	return nuo.SetOwnerID(u.ID)
}

// AddLikeIDs adds the "likes" edge to the NoteLike entity by IDs.
func (nuo *NoteUpdateOne) AddLikeIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.AddLikeIDs(ids...)
	return nuo
}

// AddLikes adds the "likes" edges to the NoteLike entity.
func (nuo *NoteUpdateOne) AddLikes(n ...*NoteLike) *NoteUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddLikeIDs(ids...)
}

// AddRepostIDs adds the "reposts" edge to the NoteRepost entity by IDs.
func (nuo *NoteUpdateOne) AddRepostIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.AddRepostIDs(ids...)
	return nuo
}

// AddReposts adds the "reposts" edges to the NoteRepost entity.
func (nuo *NoteUpdateOne) AddReposts(n ...*NoteRepost) *NoteUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddRepostIDs(ids...)
}

// Mutation returns the NoteMutation object of the builder.
func (nuo *NoteUpdateOne) Mutation() *NoteMutation {
	return nuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (nuo *NoteUpdateOne) ClearOwner() *NoteUpdateOne {
	nuo.mutation.ClearOwner()
	return nuo
}

// ClearLikes clears all "likes" edges to the NoteLike entity.
func (nuo *NoteUpdateOne) ClearLikes() *NoteUpdateOne {
	nuo.mutation.ClearLikes()
	return nuo
}

// RemoveLikeIDs removes the "likes" edge to NoteLike entities by IDs.
func (nuo *NoteUpdateOne) RemoveLikeIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.RemoveLikeIDs(ids...)
	return nuo
}

// RemoveLikes removes "likes" edges to NoteLike entities.
func (nuo *NoteUpdateOne) RemoveLikes(n ...*NoteLike) *NoteUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveLikeIDs(ids...)
}

// ClearReposts clears all "reposts" edges to the NoteRepost entity.
func (nuo *NoteUpdateOne) ClearReposts() *NoteUpdateOne {
	nuo.mutation.ClearReposts()
	return nuo
}

// RemoveRepostIDs removes the "reposts" edge to NoteRepost entities by IDs.
func (nuo *NoteUpdateOne) RemoveRepostIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.RemoveRepostIDs(ids...)
	return nuo
}

// RemoveReposts removes "reposts" edges to NoteRepost entities.
func (nuo *NoteUpdateOne) RemoveReposts(n ...*NoteRepost) *NoteUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveRepostIDs(ids...)
}

// Where appends a list predicates to the NoteUpdate builder.
func (nuo *NoteUpdateOne) Where(ps ...predicate.Note) *NoteUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NoteUpdateOne) Select(field string, fields ...string) *NoteUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Note entity.
func (nuo *NoteUpdateOne) Save(ctx context.Context) (*Note, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NoteUpdateOne) SaveX(ctx context.Context) *Note {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NoteUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NoteUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NoteUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := note.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NoteUpdateOne) check() error {
	if v, ok := nuo.mutation.Title(); ok {
		if err := note.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Note.title": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Visibility(); ok {
		if err := note.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Note.visibility": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.PermissionLevel(); ok {
		if err := note.PermissionLevelValidator(v); err != nil {
			return &ValidationError{Name: "permission_level", err: fmt.Errorf(`ent: validator failed for field "Note.permission_level": %w`, err)}
		}
	}
	if nuo.mutation.OwnerCleared() && len(nuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Note.owner"`)
	}
	return nil
}

func (nuo *NoteUpdateOne) sqlSave(ctx context.Context) (_node *Note, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Note.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, note.FieldID)
		for _, f := range fields {
			if !note.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != note.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Title(); ok {
		_spec.SetField(note.FieldTitle, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(note.FieldDescription, field.TypeString, value)
	}
	if nuo.mutation.DescriptionCleared() {
		_spec.ClearField(note.FieldDescription, field.TypeString)
	}
	if value, ok := nuo.mutation.Content(); ok {
		_spec.SetField(note.FieldContent, field.TypeString, value)
	}
	if nuo.mutation.ContentCleared() {
		_spec.ClearField(note.FieldContent, field.TypeString)
	}
	if value, ok := nuo.mutation.Resources(); ok {
		_spec.SetField(note.FieldResources, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedResources(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, note.FieldResources, value)
		})
	}
	if nuo.mutation.ResourcesCleared() {
		_spec.ClearField(note.FieldResources, field.TypeJSON)
	}
	if value, ok := nuo.mutation.AiCurriculum(); ok {
		_spec.SetField(note.FieldAiCurriculum, field.TypeString, value)
	}
	if nuo.mutation.AiCurriculumCleared() {
		_spec.ClearField(note.FieldAiCurriculum, field.TypeString)
	}
	if value, ok := nuo.mutation.Visibility(); ok {
		_spec.SetField(note.FieldVisibility, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.PermissionLevel(); ok {
		_spec.SetField(note.FieldPermissionLevel, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.ShareToken(); ok {
		_spec.SetField(note.FieldShareToken, field.TypeString, value)
	}
	if nuo.mutation.ShareTokenCleared() {
		_spec.ClearField(note.FieldShareToken, field.TypeString)
	}
	if value, ok := nuo.mutation.AiProcessing(); ok {
		_spec.SetField(note.FieldAiProcessing, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(note.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   note.OwnerTable,
			Columns: []string{note.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.LikesTable,
			Columns: []string{note.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedLikesIDs(); len(nodes) > 0 && !nuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.LikesTable,
			Columns: []string{note.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.LikesTable,
			Columns: []string{note.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.RepostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.RepostsTable,
			Columns: []string{note.RepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedRepostsIDs(); len(nodes) > 0 && !nuo.mutation.RepostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.RepostsTable,
			Columns: []string{note.RepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RepostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.RepostsTable,
			Columns: []string{note.RepostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(noterepost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Note{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
