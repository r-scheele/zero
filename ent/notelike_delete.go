// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/r-scheele/zero/ent/notelike"
	"github.com/r-scheele/zero/ent/predicate"
)

// NoteLikeDelete is the builder for deleting a NoteLike entity.
type NoteLikeDelete struct {
	config
	hooks    []Hook
	mutation *NoteLikeMutation
}

// Where appends a list predicates to the NoteLikeDelete builder.
func (nld *NoteLikeDelete) Where(ps ...predicate.NoteLike) *NoteLikeDelete {
	nld.mutation.Where(ps...)
	return nld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nld *NoteLikeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nld.sqlExec, nld.mutation, nld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nld *NoteLikeDelete) ExecX(ctx context.Context) int {
	n, err := nld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nld *NoteLikeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(notelike.Table, sqlgraph.NewFieldSpec(notelike.FieldID, field.TypeInt))
	if ps := nld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nld.mutation.done = true
	return affected, err
}

// NoteLikeDeleteOne is the builder for deleting a single NoteLike entity.
type NoteLikeDeleteOne struct {
	nld *NoteLikeDelete
}

// Where appends a list predicates to the NoteLikeDelete builder.
func (nldo *NoteLikeDeleteOne) Where(ps ...predicate.NoteLike) *NoteLikeDeleteOne {
	nldo.nld.mutation.Where(ps...)
	return nldo
}

// Exec executes the deletion query.
func (nldo *NoteLikeDeleteOne) Exec(ctx context.Context) error {
	n, err := nldo.nld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{notelike.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nldo *NoteLikeDeleteOne) ExecX(ctx context.Context) {
	if err := nldo.Exec(ctx); err != nil {
		panic(err)
	}
}
