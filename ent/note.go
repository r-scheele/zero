// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/r-scheele/zero/ent/note"
	"github.com/r-scheele/zero/ent/user"
	"github.com/r-scheele/zero/pkg/types"
)

// Note is the model entity for the Note schema.
type Note struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title of the note
	Title string `json:"title,omitempty"`
	// Brief description of the note
	Description string `json:"description,omitempty"`
	// Main text content of the note
	Content string `json:"content,omitempty"`
	// Array of attached resources (files, links, etc.)
	Resources []types.Resource `json:"resources,omitempty"`
	// AI-generated curriculum based on note content
	AiCurriculum string `json:"ai_curriculum,omitempty"`
	// Note visibility setting
	Visibility note.Visibility `json:"visibility,omitempty"`
	// Permission level for public notes
	PermissionLevel note.PermissionLevel `json:"permission_level,omitempty"`
	// Unique token for sharing the note via link
	ShareToken string `json:"share_token,omitempty"`
	// Whether AI is currently processing this note
	AiProcessing bool `json:"ai_processing,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NoteQuery when eager-loading is set.
	Edges        NoteEdges `json:"edges"`
	user_notes   *int
	selectValues sql.SelectValues
}

// NoteEdges holds the relations/edges for other nodes in the graph.
type NoteEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Likes holds the value of the likes edge.
	Likes []*NoteLike `json:"likes,omitempty"`
	// Reposts holds the value of the reposts edge.
	Reposts []*NoteRepost `json:"reposts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NoteEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e NoteEdges) LikesOrErr() ([]*NoteLike, error) {
	if e.loadedTypes[1] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "likes"}
}

// RepostsOrErr returns the Reposts value or an error if the edge
// was not loaded in eager-loading.
func (e NoteEdges) RepostsOrErr() ([]*NoteRepost, error) {
	if e.loadedTypes[2] {
		return e.Reposts, nil
	}
	return nil, &NotLoadedError{edge: "reposts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Note) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case note.FieldResources:
			values[i] = new([]byte)
		case note.FieldAiProcessing:
			values[i] = new(sql.NullBool)
		case note.FieldID:
			values[i] = new(sql.NullInt64)
		case note.FieldTitle, note.FieldDescription, note.FieldContent, note.FieldAiCurriculum, note.FieldVisibility, note.FieldPermissionLevel, note.FieldShareToken:
			values[i] = new(sql.NullString)
		case note.FieldCreatedAt, note.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case note.ForeignKeys[0]: // user_notes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Note fields.
func (n *Note) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case note.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case note.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				n.Title = value.String
			}
		case note.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				n.Description = value.String
			}
		case note.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				n.Content = value.String
			}
		case note.FieldResources:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resources", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Resources); err != nil {
					return fmt.Errorf("unmarshal field resources: %w", err)
				}
			}
		case note.FieldAiCurriculum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_curriculum", values[i])
			} else if value.Valid {
				n.AiCurriculum = value.String
			}
		case note.FieldVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visibility", values[i])
			} else if value.Valid {
				n.Visibility = note.Visibility(value.String)
			}
		case note.FieldPermissionLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permission_level", values[i])
			} else if value.Valid {
				n.PermissionLevel = note.PermissionLevel(value.String)
			}
		case note.FieldShareToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field share_token", values[i])
			} else if value.Valid {
				n.ShareToken = value.String
			}
		case note.FieldAiProcessing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ai_processing", values[i])
			} else if value.Valid {
				n.AiProcessing = value.Bool
			}
		case note.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case note.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case note.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_notes", value)
			} else if value.Valid {
				n.user_notes = new(int)
				*n.user_notes = int(value.Int64)
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Note.
// This includes values selected through modifiers, order, etc.
func (n *Note) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Note entity.
func (n *Note) QueryOwner() *UserQuery {
	return NewNoteClient(n.config).QueryOwner(n)
}

// QueryLikes queries the "likes" edge of the Note entity.
func (n *Note) QueryLikes() *NoteLikeQuery {
	return NewNoteClient(n.config).QueryLikes(n)
}

// QueryReposts queries the "reposts" edge of the Note entity.
func (n *Note) QueryReposts() *NoteRepostQuery {
	return NewNoteClient(n.config).QueryReposts(n)
}

// Update returns a builder for updating this Note.
// Note that you need to call Note.Unwrap() before calling this method if this Note
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Note) Update() *NoteUpdateOne {
	return NewNoteClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Note entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Note) Unwrap() *Note {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Note is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Note) String() string {
	var builder strings.Builder
	builder.WriteString("Note(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("title=")
	builder.WriteString(n.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(n.Description)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(n.Content)
	builder.WriteString(", ")
	builder.WriteString("resources=")
	builder.WriteString(fmt.Sprintf("%v", n.Resources))
	builder.WriteString(", ")
	builder.WriteString("ai_curriculum=")
	builder.WriteString(n.AiCurriculum)
	builder.WriteString(", ")
	builder.WriteString("visibility=")
	builder.WriteString(fmt.Sprintf("%v", n.Visibility))
	builder.WriteString(", ")
	builder.WriteString("permission_level=")
	builder.WriteString(fmt.Sprintf("%v", n.PermissionLevel))
	builder.WriteString(", ")
	builder.WriteString("share_token=")
	builder.WriteString(n.ShareToken)
	builder.WriteString(", ")
	builder.WriteString("ai_processing=")
	builder.WriteString(fmt.Sprintf("%v", n.AiProcessing))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Notes is a parsable slice of Note.
type Notes []*Note
